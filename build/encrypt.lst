ARM GAS  /tmp/ccqfkvyz.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"encrypt.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.KeyExpansionCore,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	KeyExpansionCore:
  26              	.LVL0:
  27              	.LFB3:
  28              		.file 1 "Core/Inc/structures.h"
   1:Core/Inc/structures.h **** #ifndef STRUCTURES_H
   2:Core/Inc/structures.h **** #define STRUCTURES_H
   3:Core/Inc/structures.h **** #include <stdint.h>
   4:Core/Inc/structures.h **** #include <string.h>
   5:Core/Inc/structures.h **** #define DBL_INT_ADD(a,b,c) if (a > 0xffffffff - (c)) ++b; a += c;
   6:Core/Inc/structures.h **** #define ROTLEFT(a,b) (((a) << (b)) | ((a) >> (32-(b))))
   7:Core/Inc/structures.h **** #define ROTRIGHT(a,b) (((a) >> (b)) | ((a) << (32-(b))))
   8:Core/Inc/structures.h **** 
   9:Core/Inc/structures.h **** #define CH(x,y,z) (((x) & (y)) ^ (~(x) & (z)))
  10:Core/Inc/structures.h **** #define MAJ(x,y,z) (((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))
  11:Core/Inc/structures.h **** #define EP0(x) (ROTRIGHT(x,2) ^ ROTRIGHT(x,13) ^ ROTRIGHT(x,22))
  12:Core/Inc/structures.h **** #define EP1(x) (ROTRIGHT(x,6) ^ ROTRIGHT(x,11) ^ ROTRIGHT(x,25))
  13:Core/Inc/structures.h **** #define SIG0(x) (ROTRIGHT(x,7) ^ ROTRIGHT(x,18) ^ ((x) >> 3))
  14:Core/Inc/structures.h **** #define SIG1(x) (ROTRIGHT(x,17) ^ ROTRIGHT(x,19) ^ ((x) >> 10))
  15:Core/Inc/structures.h **** 
  16:Core/Inc/structures.h **** 
  17:Core/Inc/structures.h **** #define SHA256_IBLOCK_SIZE 64   // input block size in bytes
  18:Core/Inc/structures.h **** #define SHA256_OUTPUT_SIZE 32   // output size in bytes
  19:Core/Inc/structures.h **** 
  20:Core/Inc/structures.h **** typedef struct {
  21:Core/Inc/structures.h **** 	uint8_t data[64];
  22:Core/Inc/structures.h **** 	uint32_t datalen;
  23:Core/Inc/structures.h **** 	uint32_t bitlen[2];
  24:Core/Inc/structures.h **** 	uint32_t state[8];
  25:Core/Inc/structures.h **** } SHA256_CTX;
  26:Core/Inc/structures.h **** 
  27:Core/Inc/structures.h **** // Encryption: Forward Rijndael S-box 
  28:Core/Inc/structures.h **** static const unsigned char s[256] =
  29:Core/Inc/structures.h **** {
  30:Core/Inc/structures.h **** 	0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
ARM GAS  /tmp/ccqfkvyz.s 			page 2


  31:Core/Inc/structures.h **** 	0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
  32:Core/Inc/structures.h **** 	0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
  33:Core/Inc/structures.h **** 	0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
  34:Core/Inc/structures.h **** 	0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
  35:Core/Inc/structures.h **** 	0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
  36:Core/Inc/structures.h **** 	0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
  37:Core/Inc/structures.h **** 	0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
  38:Core/Inc/structures.h **** 	0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
  39:Core/Inc/structures.h **** 	0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
  40:Core/Inc/structures.h **** 	0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
  41:Core/Inc/structures.h **** 	0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
  42:Core/Inc/structures.h **** 	0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
  43:Core/Inc/structures.h **** 	0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
  44:Core/Inc/structures.h **** 	0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
  45:Core/Inc/structures.h **** 	0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
  46:Core/Inc/structures.h **** };
  47:Core/Inc/structures.h **** 
  48:Core/Inc/structures.h **** // Encryption: Multiply by 2 for MixColumns
  49:Core/Inc/structures.h **** static const unsigned char mul2[] =
  50:Core/Inc/structures.h **** {
  51:Core/Inc/structures.h **** 	0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
  52:Core/Inc/structures.h **** 	0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
  53:Core/Inc/structures.h **** 	0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
  54:Core/Inc/structures.h **** 	0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
  55:Core/Inc/structures.h **** 	0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
  56:Core/Inc/structures.h **** 	0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
  57:Core/Inc/structures.h **** 	0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
  58:Core/Inc/structures.h **** 	0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
  59:Core/Inc/structures.h **** 	0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
  60:Core/Inc/structures.h **** 	0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
  61:Core/Inc/structures.h **** 	0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
  62:Core/Inc/structures.h **** 	0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
  63:Core/Inc/structures.h **** 	0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
  64:Core/Inc/structures.h **** 	0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
  65:Core/Inc/structures.h **** 	0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
  66:Core/Inc/structures.h **** 	0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
  67:Core/Inc/structures.h **** };
  68:Core/Inc/structures.h **** 
  69:Core/Inc/structures.h **** // Encryption: Multiply by 3 for MixColumns
  70:Core/Inc/structures.h **** static const unsigned char mul3[] =
  71:Core/Inc/structures.h **** {
  72:Core/Inc/structures.h **** 	0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
  73:Core/Inc/structures.h **** 	0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
  74:Core/Inc/structures.h **** 	0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
  75:Core/Inc/structures.h **** 	0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
  76:Core/Inc/structures.h **** 	0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
  77:Core/Inc/structures.h **** 	0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
  78:Core/Inc/structures.h **** 	0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
  79:Core/Inc/structures.h **** 	0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
  80:Core/Inc/structures.h **** 	0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
  81:Core/Inc/structures.h **** 	0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
  82:Core/Inc/structures.h **** 	0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
  83:Core/Inc/structures.h **** 	0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
  84:Core/Inc/structures.h **** 	0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
  85:Core/Inc/structures.h **** 	0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
  86:Core/Inc/structures.h **** 	0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
  87:Core/Inc/structures.h **** 	0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
ARM GAS  /tmp/ccqfkvyz.s 			page 3


  88:Core/Inc/structures.h **** };
  89:Core/Inc/structures.h **** 
  90:Core/Inc/structures.h **** // Used in KeyExpansion
  91:Core/Inc/structures.h **** static const unsigned char rcon[256] = {
  92:Core/Inc/structures.h **** 	0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
  93:Core/Inc/structures.h **** 	0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
  94:Core/Inc/structures.h **** 	0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
  95:Core/Inc/structures.h **** 	0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
  96:Core/Inc/structures.h **** 	0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
  97:Core/Inc/structures.h **** 	0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
  98:Core/Inc/structures.h **** 	0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
  99:Core/Inc/structures.h **** 	0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
 100:Core/Inc/structures.h **** 	0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
 101:Core/Inc/structures.h **** 	0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
 102:Core/Inc/structures.h **** 	0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
 103:Core/Inc/structures.h **** 	0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
 104:Core/Inc/structures.h **** 	0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
 105:Core/Inc/structures.h **** 	0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
 106:Core/Inc/structures.h **** 	0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
 107:Core/Inc/structures.h **** 	0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
 108:Core/Inc/structures.h **** };
 109:Core/Inc/structures.h **** 
 110:Core/Inc/structures.h **** // Decryption: Inverse Rijndael S-box
 111:Core/Inc/structures.h **** static const unsigned char inv_s[256] =
 112:Core/Inc/structures.h **** {
 113:Core/Inc/structures.h **** 	0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
 114:Core/Inc/structures.h **** 	0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
 115:Core/Inc/structures.h **** 	0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
 116:Core/Inc/structures.h **** 	0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
 117:Core/Inc/structures.h **** 	0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
 118:Core/Inc/structures.h **** 	0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
 119:Core/Inc/structures.h **** 	0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
 120:Core/Inc/structures.h **** 	0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
 121:Core/Inc/structures.h **** 	0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
 122:Core/Inc/structures.h **** 	0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
 123:Core/Inc/structures.h **** 	0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
 124:Core/Inc/structures.h **** 	0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
 125:Core/Inc/structures.h **** 	0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
 126:Core/Inc/structures.h **** 	0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
 127:Core/Inc/structures.h **** 	0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
 128:Core/Inc/structures.h **** 	0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
 129:Core/Inc/structures.h **** };
 130:Core/Inc/structures.h **** 
 131:Core/Inc/structures.h **** // Decryption: Multiply by 9 for InverseMixColumns
 132:Core/Inc/structures.h **** static const unsigned char mul9[256] =
 133:Core/Inc/structures.h **** {
 134:Core/Inc/structures.h **** 	0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
 135:Core/Inc/structures.h **** 	0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
 136:Core/Inc/structures.h **** 	0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,
 137:Core/Inc/structures.h **** 	0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,
 138:Core/Inc/structures.h **** 	0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,
 139:Core/Inc/structures.h **** 	0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,
 140:Core/Inc/structures.h **** 	0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,
 141:Core/Inc/structures.h **** 	0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,
 142:Core/Inc/structures.h **** 	0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,
 143:Core/Inc/structures.h **** 	0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,
 144:Core/Inc/structures.h **** 	0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
ARM GAS  /tmp/ccqfkvyz.s 			page 4


 145:Core/Inc/structures.h **** 	0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
 146:Core/Inc/structures.h **** 	0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,
 147:Core/Inc/structures.h **** 	0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,
 148:Core/Inc/structures.h **** 	0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,
 149:Core/Inc/structures.h **** 	0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46
 150:Core/Inc/structures.h **** };
 151:Core/Inc/structures.h **** 
 152:Core/Inc/structures.h **** // Decryption: Multiply by 11 for InverseMixColumns
 153:Core/Inc/structures.h **** static const unsigned char mul11[256] =
 154:Core/Inc/structures.h **** {
 155:Core/Inc/structures.h **** 	0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
 156:Core/Inc/structures.h **** 	0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,
 157:Core/Inc/structures.h **** 	0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,
 158:Core/Inc/structures.h **** 	0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,
 159:Core/Inc/structures.h **** 	0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,
 160:Core/Inc/structures.h **** 	0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,
 161:Core/Inc/structures.h **** 	0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,
 162:Core/Inc/structures.h **** 	0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,
 163:Core/Inc/structures.h **** 	0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,
 164:Core/Inc/structures.h **** 	0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,
 165:Core/Inc/structures.h **** 	0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,
 166:Core/Inc/structures.h **** 	0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,
 167:Core/Inc/structures.h **** 	0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,
 168:Core/Inc/structures.h **** 	0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,
 169:Core/Inc/structures.h **** 	0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,
 170:Core/Inc/structures.h **** 	0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3
 171:Core/Inc/structures.h **** };
 172:Core/Inc/structures.h **** 
 173:Core/Inc/structures.h **** // Decryption: Multiply by 13 for InverseMixColumns
 174:Core/Inc/structures.h **** static const unsigned char mul13[256] =
 175:Core/Inc/structures.h **** {
 176:Core/Inc/structures.h **** 	0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
 177:Core/Inc/structures.h **** 	0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,
 178:Core/Inc/structures.h **** 	0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,
 179:Core/Inc/structures.h **** 	0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
 180:Core/Inc/structures.h **** 	0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
 181:Core/Inc/structures.h **** 	0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,
 182:Core/Inc/structures.h **** 	0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,
 183:Core/Inc/structures.h **** 	0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,
 184:Core/Inc/structures.h **** 	0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,
 185:Core/Inc/structures.h **** 	0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
 186:Core/Inc/structures.h **** 	0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,
 187:Core/Inc/structures.h **** 	0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,
 188:Core/Inc/structures.h **** 	0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,
 189:Core/Inc/structures.h **** 	0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,
 190:Core/Inc/structures.h **** 	0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
 191:Core/Inc/structures.h **** 	0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97
 192:Core/Inc/structures.h **** };
 193:Core/Inc/structures.h **** 
 194:Core/Inc/structures.h **** // Decryption: Multiply by 14 for InverseMixColumns
 195:Core/Inc/structures.h **** static const unsigned char mul14[256] =
 196:Core/Inc/structures.h **** {
 197:Core/Inc/structures.h **** 	0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
 198:Core/Inc/structures.h **** 	0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
 199:Core/Inc/structures.h **** 	0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
 200:Core/Inc/structures.h **** 	0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
 201:Core/Inc/structures.h **** 	0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
ARM GAS  /tmp/ccqfkvyz.s 			page 5


 202:Core/Inc/structures.h **** 	0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
 203:Core/Inc/structures.h **** 	0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
 204:Core/Inc/structures.h **** 	0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
 205:Core/Inc/structures.h **** 	0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
 206:Core/Inc/structures.h **** 	0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
 207:Core/Inc/structures.h **** 	0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
 208:Core/Inc/structures.h **** 	0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
 209:Core/Inc/structures.h **** 	0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
 210:Core/Inc/structures.h **** 	0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
 211:Core/Inc/structures.h **** 	0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
 212:Core/Inc/structures.h **** 	0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d
 213:Core/Inc/structures.h **** };
 214:Core/Inc/structures.h **** 
 215:Core/Inc/structures.h **** // Auxiliary function for KeyExpansion
 216:Core/Inc/structures.h **** static void KeyExpansionCore(unsigned char * in, unsigned char i) {
  29              		.loc 1 216 67 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              		.loc 1 216 67 is_stmt 0 view .LVU1
  35 0000 70B4     		push	{r4, r5, r6}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 12
  38              		.cfi_offset 4, -12
  39              		.cfi_offset 5, -8
  40              		.cfi_offset 6, -4
 217:Core/Inc/structures.h **** 	// Rotate left by one byte: shift left 
 218:Core/Inc/structures.h **** 	unsigned char t = in[0];
  41              		.loc 1 218 2 is_stmt 1 view .LVU2
  42              		.loc 1 218 16 is_stmt 0 view .LVU3
  43 0002 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
  44              	.LVL1:
 219:Core/Inc/structures.h **** 	in[0] = in[1];
  45              		.loc 1 219 2 is_stmt 1 view .LVU4
  46              		.loc 1 219 8 is_stmt 0 view .LVU5
  47 0004 4278     		ldrb	r2, [r0, #1]	@ zero_extendqisi2
 220:Core/Inc/structures.h **** 	in[1] = in[2];
  48              		.loc 1 220 2 is_stmt 1 view .LVU6
  49              		.loc 1 220 8 is_stmt 0 view .LVU7
  50 0006 8678     		ldrb	r6, [r0, #2]	@ zero_extendqisi2
 221:Core/Inc/structures.h **** 	in[2] = in[3];
  51              		.loc 1 221 2 is_stmt 1 view .LVU8
  52              		.loc 1 221 8 is_stmt 0 view .LVU9
  53 0008 C578     		ldrb	r5, [r0, #3]	@ zero_extendqisi2
 222:Core/Inc/structures.h **** 	in[3] = t;
  54              		.loc 1 222 2 is_stmt 1 view .LVU10
 223:Core/Inc/structures.h **** 
 224:Core/Inc/structures.h **** 	// S-box 4 bytes 
 225:Core/Inc/structures.h **** 	in[0] = s[in[0]];
  55              		.loc 1 225 2 view .LVU11
  56              		.loc 1 225 11 is_stmt 0 view .LVU12
  57 000a 074B     		ldr	r3, .L3
  58 000c 9A5C     		ldrb	r2, [r3, r2]	@ zero_extendqisi2
 226:Core/Inc/structures.h **** 	in[1] = s[in[1]];
  59              		.loc 1 226 2 is_stmt 1 view .LVU13
  60              		.loc 1 226 11 is_stmt 0 view .LVU14
ARM GAS  /tmp/ccqfkvyz.s 			page 6


  61 000e 9E5D     		ldrb	r6, [r3, r6]	@ zero_extendqisi2
  62              		.loc 1 226 8 view .LVU15
  63 0010 4670     		strb	r6, [r0, #1]
 227:Core/Inc/structures.h **** 	in[2] = s[in[2]];
  64              		.loc 1 227 2 is_stmt 1 view .LVU16
  65              		.loc 1 227 11 is_stmt 0 view .LVU17
  66 0012 5D5D     		ldrb	r5, [r3, r5]	@ zero_extendqisi2
  67              		.loc 1 227 8 view .LVU18
  68 0014 8570     		strb	r5, [r0, #2]
 228:Core/Inc/structures.h **** 	in[3] = s[in[3]];
  69              		.loc 1 228 2 is_stmt 1 view .LVU19
  70              		.loc 1 228 11 is_stmt 0 view .LVU20
  71 0016 1B5D     		ldrb	r3, [r3, r4]	@ zero_extendqisi2
  72              		.loc 1 228 8 view .LVU21
  73 0018 C370     		strb	r3, [r0, #3]
 229:Core/Inc/structures.h **** 
 230:Core/Inc/structures.h **** 	// RCon
 231:Core/Inc/structures.h **** 	in[0] ^= rcon[i];
  74              		.loc 1 231 2 is_stmt 1 view .LVU22
  75              		.loc 1 231 15 is_stmt 0 view .LVU23
  76 001a 044B     		ldr	r3, .L3+4
  77 001c 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
  78              		.loc 1 231 8 view .LVU24
  79 001e 5A40     		eors	r2, r2, r3
  80 0020 0270     		strb	r2, [r0]
 232:Core/Inc/structures.h **** }
  81              		.loc 1 232 1 view .LVU25
  82 0022 70BC     		pop	{r4, r5, r6}
  83              	.LCFI1:
  84              		.cfi_restore 6
  85              		.cfi_restore 5
  86              		.cfi_restore 4
  87              		.cfi_def_cfa_offset 0
  88              	.LVL2:
  89              		.loc 1 232 1 view .LVU26
  90 0024 7047     		bx	lr
  91              	.L4:
  92 0026 00BF     		.align	2
  93              	.L3:
  94 0028 00000000 		.word	.LANCHOR0
  95 002c 00000000 		.word	.LANCHOR1
  96              		.cfi_endproc
  97              	.LFE3:
  99              		.section	.text.KeyExpansion,"ax",%progbits
 100              		.align	1
 101              		.syntax unified
 102              		.thumb
 103              		.thumb_func
 104              		.fpu fpv4-sp-d16
 106              	KeyExpansion:
 107              	.LVL3:
 108              	.LFB5:
 233:Core/Inc/structures.h **** 
 234:Core/Inc/structures.h **** static int round16(void* dat){
 235:Core/Inc/structures.h ****   int len = strlen((char*)dat);
 236:Core/Inc/structures.h ****   int diff = len&0xf;
 237:Core/Inc/structures.h ****   if(diff){
ARM GAS  /tmp/ccqfkvyz.s 			page 7


 238:Core/Inc/structures.h ****     len += 16-diff;
 239:Core/Inc/structures.h ****   }
 240:Core/Inc/structures.h **** 	return len;
 241:Core/Inc/structures.h **** }
 242:Core/Inc/structures.h **** 
 243:Core/Inc/structures.h **** /* The main KeyExpansion function
 244:Core/Inc/structures.h ****  * Generates additional keys using the original key
 245:Core/Inc/structures.h ****  * Total of 11 128-bit keys generated, including the original
 246:Core/Inc/structures.h ****  * Keys are stored one after the other in expandedKeys
 247:Core/Inc/structures.h ****  */
 248:Core/Inc/structures.h **** static void KeyExpansion(unsigned char inputKey[16], unsigned char expandedKeys[176]) {
 109              		.loc 1 248 87 is_stmt 1 view -0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 8
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113              		.loc 1 248 87 is_stmt 0 view .LVU28
 114 0000 70B5     		push	{r4, r5, r6, lr}
 115              	.LCFI2:
 116              		.cfi_def_cfa_offset 16
 117              		.cfi_offset 4, -16
 118              		.cfi_offset 5, -12
 119              		.cfi_offset 6, -8
 120              		.cfi_offset 14, -4
 121 0002 82B0     		sub	sp, sp, #8
 122              	.LCFI3:
 123              		.cfi_def_cfa_offset 24
 124 0004 0D46     		mov	r5, r1
 249:Core/Inc/structures.h **** 	// The first 128 bits are the original key
 250:Core/Inc/structures.h **** 	for (int i = 0; i < 16; i++) {
 125              		.loc 1 250 2 is_stmt 1 view .LVU29
 126              	.LBB2:
 127              		.loc 1 250 7 view .LVU30
 128              	.LVL4:
 129              		.loc 1 250 11 is_stmt 0 view .LVU31
 130 0006 0023     		movs	r3, #0
 131              		.loc 1 250 2 view .LVU32
 132 0008 02E0     		b	.L6
 133              	.LVL5:
 134              	.L7:
 251:Core/Inc/structures.h **** 		expandedKeys[i] = inputKey[i];
 135              		.loc 1 251 3 is_stmt 1 discriminator 3 view .LVU33
 136              		.loc 1 251 29 is_stmt 0 discriminator 3 view .LVU34
 137 000a C25C     		ldrb	r2, [r0, r3]	@ zero_extendqisi2
 138              		.loc 1 251 19 discriminator 3 view .LVU35
 139 000c EA54     		strb	r2, [r5, r3]
 250:Core/Inc/structures.h **** 		expandedKeys[i] = inputKey[i];
 140              		.loc 1 250 27 discriminator 3 view .LVU36
 141 000e 0133     		adds	r3, r3, #1
 142              	.LVL6:
 143              	.L6:
 250:Core/Inc/structures.h **** 		expandedKeys[i] = inputKey[i];
 144              		.loc 1 250 2 discriminator 1 view .LVU37
 145 0010 0F2B     		cmp	r3, #15
 146 0012 FADD     		ble	.L7
 147              	.LBE2:
 252:Core/Inc/structures.h **** 	}
 253:Core/Inc/structures.h **** 
ARM GAS  /tmp/ccqfkvyz.s 			page 8


 254:Core/Inc/structures.h **** 	int bytesGenerated = 16; // Bytes we've generated so far
 255:Core/Inc/structures.h **** 	int rconIteration = 1; // Keeps track of rcon value
 148              		.loc 1 255 6 view .LVU38
 149 0014 0121     		movs	r1, #1
 150              	.LVL7:
 254:Core/Inc/structures.h **** 	int rconIteration = 1; // Keeps track of rcon value
 151              		.loc 1 254 6 view .LVU39
 152 0016 1024     		movs	r4, #16
 153 0018 24E0     		b	.L8
 154              	.LVL8:
 155              	.L9:
 156              	.LBB3:
 256:Core/Inc/structures.h **** 	unsigned char tmpCore[4]; // Temp storage for core
 257:Core/Inc/structures.h **** 
 258:Core/Inc/structures.h **** 	while (bytesGenerated < 176) {
 259:Core/Inc/structures.h **** 		/* Read 4 bytes for the core
 260:Core/Inc/structures.h **** 		* They are the previously generated 4 bytes
 261:Core/Inc/structures.h **** 		* Initially, these will be the final 4 bytes of the original key
 262:Core/Inc/structures.h **** 		*/
 263:Core/Inc/structures.h **** 		for (int i = 0; i < 4; i++) {
 264:Core/Inc/structures.h **** 			tmpCore[i] = expandedKeys[i + bytesGenerated - 4];
 157              		.loc 1 264 4 is_stmt 1 discriminator 3 view .LVU40
 158              		.loc 1 264 32 is_stmt 0 discriminator 3 view .LVU41
 159 001a E218     		adds	r2, r4, r3
 160              		.loc 1 264 29 discriminator 3 view .LVU42
 161 001c 2A44     		add	r2, r2, r5
 162 001e 12F8040C 		ldrb	r0, [r2, #-4]	@ zero_extendqisi2
 163              		.loc 1 264 15 discriminator 3 view .LVU43
 164 0022 02AA     		add	r2, sp, #8
 165 0024 1A44     		add	r2, r2, r3
 166 0026 02F8040C 		strb	r0, [r2, #-4]
 263:Core/Inc/structures.h **** 			tmpCore[i] = expandedKeys[i + bytesGenerated - 4];
 167              		.loc 1 263 27 discriminator 3 view .LVU44
 168 002a 0133     		adds	r3, r3, #1
 169              	.LVL9:
 170              	.L13:
 263:Core/Inc/structures.h **** 			tmpCore[i] = expandedKeys[i + bytesGenerated - 4];
 171              		.loc 1 263 3 discriminator 1 view .LVU45
 172 002c 032B     		cmp	r3, #3
 173 002e F4DD     		ble	.L9
 174              	.LBE3:
 265:Core/Inc/structures.h **** 		}
 266:Core/Inc/structures.h **** 
 267:Core/Inc/structures.h **** 		// Perform the core once for each 16 byte key
 268:Core/Inc/structures.h **** 		if (bytesGenerated % 16 == 0) {
 175              		.loc 1 268 3 is_stmt 1 view .LVU46
 176              		.loc 1 268 6 is_stmt 0 view .LVU47
 177 0030 14F00F0F 		tst	r4, #15
 178 0034 01D0     		beq	.L16
 179              	.LVL10:
 180              	.L10:
 269:Core/Inc/structures.h **** 			KeyExpansionCore(tmpCore, rconIteration++);
 270:Core/Inc/structures.h **** 		}
 271:Core/Inc/structures.h **** 
 272:Core/Inc/structures.h **** 		for (unsigned char a = 0; a < 4; a++) {
 181              		.loc 1 272 3 is_stmt 1 view .LVU48
 182              	.LBB4:
ARM GAS  /tmp/ccqfkvyz.s 			page 9


 183              		.loc 1 272 8 view .LVU49
 184              		.loc 1 272 22 is_stmt 0 view .LVU50
 185 0036 0023     		movs	r3, #0
 186              		.loc 1 272 3 view .LVU51
 187 0038 12E0     		b	.L11
 188              	.LVL11:
 189              	.L16:
 190              		.loc 1 272 3 view .LVU52
 191              	.LBE4:
 269:Core/Inc/structures.h **** 			KeyExpansionCore(tmpCore, rconIteration++);
 192              		.loc 1 269 4 is_stmt 1 view .LVU53
 269:Core/Inc/structures.h **** 			KeyExpansionCore(tmpCore, rconIteration++);
 193              		.loc 1 269 43 is_stmt 0 view .LVU54
 194 003a 4E1C     		adds	r6, r1, #1
 195              	.LVL12:
 269:Core/Inc/structures.h **** 			KeyExpansionCore(tmpCore, rconIteration++);
 196              		.loc 1 269 4 view .LVU55
 197 003c C9B2     		uxtb	r1, r1
 198 003e 01A8     		add	r0, sp, #4
 199 0040 FFF7FEFF 		bl	KeyExpansionCore
 200              	.LVL13:
 269:Core/Inc/structures.h **** 			KeyExpansionCore(tmpCore, rconIteration++);
 201              		.loc 1 269 43 view .LVU56
 202 0044 3146     		mov	r1, r6
 203 0046 F6E7     		b	.L10
 204              	.LVL14:
 205              	.L12:
 206              	.LBB5:
 273:Core/Inc/structures.h **** 			expandedKeys[bytesGenerated] = expandedKeys[bytesGenerated - 16] ^ tmpCore[a];
 207              		.loc 1 273 4 is_stmt 1 discriminator 3 view .LVU57
 208              		.loc 1 273 47 is_stmt 0 discriminator 3 view .LVU58
 209 0048 2A19     		adds	r2, r5, r4
 210 004a 12F8102C 		ldrb	r2, [r2, #-16]	@ zero_extendqisi2
 211              		.loc 1 273 78 discriminator 3 view .LVU59
 212 004e 02A8     		add	r0, sp, #8
 213 0050 1844     		add	r0, r0, r3
 214 0052 10F8040C 		ldrb	r0, [r0, #-4]	@ zero_extendqisi2
 215              		.loc 1 273 33 discriminator 3 view .LVU60
 216 0056 4240     		eors	r2, r2, r0
 217 0058 2A55     		strb	r2, [r5, r4]
 274:Core/Inc/structures.h **** 			bytesGenerated++;
 218              		.loc 1 274 4 is_stmt 1 discriminator 3 view .LVU61
 219              		.loc 1 274 18 is_stmt 0 discriminator 3 view .LVU62
 220 005a 0134     		adds	r4, r4, #1
 221              	.LVL15:
 272:Core/Inc/structures.h **** 			expandedKeys[bytesGenerated] = expandedKeys[bytesGenerated - 16] ^ tmpCore[a];
 222              		.loc 1 272 37 discriminator 3 view .LVU63
 223 005c 0133     		adds	r3, r3, #1
 224              	.LVL16:
 272:Core/Inc/structures.h **** 			expandedKeys[bytesGenerated] = expandedKeys[bytesGenerated - 16] ^ tmpCore[a];
 225              		.loc 1 272 37 discriminator 3 view .LVU64
 226 005e DBB2     		uxtb	r3, r3
 227              	.LVL17:
 228              	.L11:
 272:Core/Inc/structures.h **** 			expandedKeys[bytesGenerated] = expandedKeys[bytesGenerated - 16] ^ tmpCore[a];
 229              		.loc 1 272 3 discriminator 1 view .LVU65
 230 0060 032B     		cmp	r3, #3
ARM GAS  /tmp/ccqfkvyz.s 			page 10


 231 0062 F1D9     		bls	.L12
 232              	.LVL18:
 233              	.L8:
 272:Core/Inc/structures.h **** 			expandedKeys[bytesGenerated] = expandedKeys[bytesGenerated - 16] ^ tmpCore[a];
 234              		.loc 1 272 3 discriminator 1 view .LVU66
 235              	.LBE5:
 258:Core/Inc/structures.h **** 		/* Read 4 bytes for the core
 236              		.loc 1 258 8 view .LVU67
 237 0064 AF2C     		cmp	r4, #175
 238 0066 01DC     		bgt	.L17
 239              	.LBB6:
 263:Core/Inc/structures.h **** 			tmpCore[i] = expandedKeys[i + bytesGenerated - 4];
 240              		.loc 1 263 12 view .LVU68
 241 0068 0023     		movs	r3, #0
 242 006a DFE7     		b	.L13
 243              	.L17:
 244              	.LBE6:
 275:Core/Inc/structures.h **** 		}
 276:Core/Inc/structures.h **** 
 277:Core/Inc/structures.h **** 	}
 278:Core/Inc/structures.h **** }
 245              		.loc 1 278 1 view .LVU69
 246 006c 02B0     		add	sp, sp, #8
 247              	.LCFI4:
 248              		.cfi_def_cfa_offset 16
 249              		@ sp needed
 250 006e 70BD     		pop	{r4, r5, r6, pc}
 251              		.loc 1 278 1 view .LVU70
 252              		.cfi_endproc
 253              	.LFE5:
 255              		.section	.text.encrypt,"ax",%progbits
 256              		.align	1
 257              		.global	encrypt
 258              		.syntax unified
 259              		.thumb
 260              		.thumb_func
 261              		.fpu fpv4-sp-d16
 263              	encrypt:
 264              	.LVL19:
 265              	.LFB6:
 266              		.file 2 "Core/Src/encrypt.c"
   1:Core/Src/encrypt.c **** #include "encrypt.h"
   2:Core/Src/encrypt.c **** //data must be a string padded with 0s to the neerst 16 bytes 
   3:Core/Src/encrypt.c **** int encrypt(uint8_t*  data,uint8_t*  pass,uint8_t sum[32]){
 267              		.loc 2 3 59 is_stmt 1 view -0
 268              		.cfi_startproc
 269              		@ args = 0, pretend = 0, frame = 352
 270              		@ frame_needed = 0, uses_anonymous_args = 0
 271              		.loc 2 3 59 is_stmt 0 view .LVU72
 272 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 273              	.LCFI5:
 274              		.cfi_def_cfa_offset 20
 275              		.cfi_offset 4, -20
 276              		.cfi_offset 5, -16
 277              		.cfi_offset 6, -12
 278              		.cfi_offset 7, -8
 279              		.cfi_offset 14, -4
ARM GAS  /tmp/ccqfkvyz.s 			page 11


 280 0002 D9B0     		sub	sp, sp, #356
 281              	.LCFI6:
 282              		.cfi_def_cfa_offset 376
 283 0004 0646     		mov	r6, r0
 284 0006 0F46     		mov	r7, r1
 285 0008 1446     		mov	r4, r2
   4:Core/Src/encrypt.c ****   int len = strlen((char*) data);
 286              		.loc 2 4 3 is_stmt 1 view .LVU73
 287              		.loc 2 4 13 is_stmt 0 view .LVU74
 288 000a FFF7FEFF 		bl	strlen
 289              	.LVL20:
 290              		.loc 2 4 7 view .LVU75
 291 000e 0546     		mov	r5, r0
 292              	.LVL21:
   5:Core/Src/encrypt.c ****   int diff = len&0xf;
 293              		.loc 2 5 3 is_stmt 1 view .LVU76
   6:Core/Src/encrypt.c ****   if(diff){
 294              		.loc 2 6 3 view .LVU77
 295              		.loc 2 6 5 is_stmt 0 view .LVU78
 296 0010 10F00F01 		ands	r1, r0, #15
 297              	.LVL22:
 298              		.loc 2 6 5 view .LVU79
 299 0014 0AD0     		beq	.L19
 300              	.LBB7:
   7:Core/Src/encrypt.c ****     int checks = 16-diff;
 301              		.loc 2 7 5 is_stmt 1 view .LVU80
 302              		.loc 2 7 9 is_stmt 0 view .LVU81
 303 0016 C1F11001 		rsb	r1, r1, #16
 304              	.LVL23:
   8:Core/Src/encrypt.c ****     len += checks;
 305              		.loc 2 8 5 is_stmt 1 view .LVU82
 306              		.loc 2 8 9 is_stmt 0 view .LVU83
 307 001a 4518     		adds	r5, r0, r1
 308              	.LVL24:
   9:Core/Src/encrypt.c ****     for(int i = 0;i < checks;i++){
 309              		.loc 2 9 5 is_stmt 1 view .LVU84
 310              	.LBB8:
 311              		.loc 2 9 9 view .LVU85
 312              		.loc 2 9 13 is_stmt 0 view .LVU86
 313 001c 0023     		movs	r3, #0
 314              	.LVL25:
 315              	.L20:
 316              		.loc 2 9 5 discriminator 1 view .LVU87
 317 001e 8B42     		cmp	r3, r1
 318 0020 04DA     		bge	.L19
  10:Core/Src/encrypt.c ****       if(data[len+i])
 319              		.loc 2 10 7 is_stmt 1 view .LVU88
 320              		.loc 2 10 18 is_stmt 0 view .LVU89
 321 0022 5A19     		adds	r2, r3, r5
 322              		.loc 2 10 14 view .LVU90
 323 0024 B25C     		ldrb	r2, [r6, r2]	@ zero_extendqisi2
 324              		.loc 2 10 9 view .LVU91
 325 0026 4ABB     		cbnz	r2, .L27
   9:Core/Src/encrypt.c ****     for(int i = 0;i < checks;i++){
 326              		.loc 2 9 31 discriminator 2 view .LVU92
 327 0028 0133     		adds	r3, r3, #1
 328              	.LVL26:
ARM GAS  /tmp/ccqfkvyz.s 			page 12


   9:Core/Src/encrypt.c ****     for(int i = 0;i < checks;i++){
 329              		.loc 2 9 31 discriminator 2 view .LVU93
 330 002a F8E7     		b	.L20
 331              	.LVL27:
 332              	.L19:
   9:Core/Src/encrypt.c ****     for(int i = 0;i < checks;i++){
 333              		.loc 2 9 31 discriminator 2 view .LVU94
 334              	.LBE8:
 335              	.LBE7:
  11:Core/Src/encrypt.c ****         return -1;
  12:Core/Src/encrypt.c ****     }
  13:Core/Src/encrypt.c ****   }
  14:Core/Src/encrypt.c ****   SHA256(pass,sum);
 336              		.loc 2 14 3 is_stmt 1 view .LVU95
 337 002c 2146     		mov	r1, r4
 338 002e 3846     		mov	r0, r7
 339              	.LVL28:
 340              		.loc 2 14 3 is_stmt 0 view .LVU96
 341 0030 FFF7FEFF 		bl	SHA256
 342              	.LVL29:
  15:Core/Src/encrypt.c **** 	unsigned char key1[176];
 343              		.loc 2 15 2 is_stmt 1 view .LVU97
  16:Core/Src/encrypt.c ****   unsigned char key2[176];
 344              		.loc 2 16 3 view .LVU98
  17:Core/Src/encrypt.c **** 	KeyExpansion(sum, key1);
 345              		.loc 2 17 2 view .LVU99
 346 0034 2CA9     		add	r1, sp, #176
 347 0036 2046     		mov	r0, r4
 348 0038 FFF7FEFF 		bl	KeyExpansion
 349              	.LVL30:
  18:Core/Src/encrypt.c ****   KeyExpansion(sum+16, key2);
 350              		.loc 2 18 3 view .LVU100
 351 003c 6946     		mov	r1, sp
 352 003e 04F11000 		add	r0, r4, #16
 353 0042 FFF7FEFF 		bl	KeyExpansion
 354              	.LVL31:
  19:Core/Src/encrypt.c ****   SHA256(data,sum);
 355              		.loc 2 19 3 view .LVU101
 356 0046 2146     		mov	r1, r4
 357 0048 3046     		mov	r0, r6
 358 004a FFF7FEFF 		bl	SHA256
 359              	.LVL32:
  20:Core/Src/encrypt.c **** 	for (int i = 0; i < len; i += 16) {
 360              		.loc 2 20 2 view .LVU102
 361              	.LBB10:
 362              		.loc 2 20 7 view .LVU103
 363              		.loc 2 20 11 is_stmt 0 view .LVU104
 364 004e 0024     		movs	r4, #0
 365              	.LVL33:
 366              	.L23:
 367              		.loc 2 20 2 discriminator 1 view .LVU105
 368 0050 A542     		cmp	r5, r4
 369 0052 06DD     		ble	.L29
  21:Core/Src/encrypt.c **** 		AESEncrypt(data+i, key1, data+i);
 370              		.loc 2 21 3 is_stmt 1 discriminator 3 view .LVU106
 371              		.loc 2 21 18 is_stmt 0 discriminator 3 view .LVU107
 372 0054 3019     		adds	r0, r6, r4
ARM GAS  /tmp/ccqfkvyz.s 			page 13


 373              		.loc 2 21 3 discriminator 3 view .LVU108
 374 0056 0246     		mov	r2, r0
 375 0058 2CA9     		add	r1, sp, #176
 376 005a FFF7FEFF 		bl	AESEncrypt
 377              	.LVL34:
  20:Core/Src/encrypt.c **** 	for (int i = 0; i < len; i += 16) {
 378              		.loc 2 20 29 discriminator 3 view .LVU109
 379 005e 1034     		adds	r4, r4, #16
 380              	.LVL35:
  20:Core/Src/encrypt.c **** 	for (int i = 0; i < len; i += 16) {
 381              		.loc 2 20 29 discriminator 3 view .LVU110
 382 0060 F6E7     		b	.L23
 383              	.L29:
  20:Core/Src/encrypt.c **** 	for (int i = 0; i < len; i += 16) {
 384              		.loc 2 20 29 discriminator 3 view .LVU111
 385              	.LBE10:
 386              	.LBB11:
  22:Core/Src/encrypt.c **** 	}
  23:Core/Src/encrypt.c **** 	for (int i = 0; i < len; i += 16) {
 387              		.loc 2 23 11 view .LVU112
 388 0062 0024     		movs	r4, #0
 389              	.LVL36:
 390              	.L25:
 391              		.loc 2 23 2 discriminator 1 view .LVU113
 392 0064 A542     		cmp	r5, r4
 393 0066 06DD     		ble	.L30
  24:Core/Src/encrypt.c **** 		AESEncrypt(data+i, key2, data+i);
 394              		.loc 2 24 3 is_stmt 1 discriminator 3 view .LVU114
 395              		.loc 2 24 18 is_stmt 0 discriminator 3 view .LVU115
 396 0068 3019     		adds	r0, r6, r4
 397              		.loc 2 24 3 discriminator 3 view .LVU116
 398 006a 0246     		mov	r2, r0
 399 006c 6946     		mov	r1, sp
 400 006e FFF7FEFF 		bl	AESEncrypt
 401              	.LVL37:
  23:Core/Src/encrypt.c **** 		AESEncrypt(data+i, key2, data+i);
 402              		.loc 2 23 29 discriminator 3 view .LVU117
 403 0072 1034     		adds	r4, r4, #16
 404              	.LVL38:
  23:Core/Src/encrypt.c **** 		AESEncrypt(data+i, key2, data+i);
 405              		.loc 2 23 29 discriminator 3 view .LVU118
 406 0074 F6E7     		b	.L25
 407              	.L30:
  23:Core/Src/encrypt.c **** 		AESEncrypt(data+i, key2, data+i);
 408              		.loc 2 23 29 discriminator 3 view .LVU119
 409              	.LBE11:
  25:Core/Src/encrypt.c **** 	}
  26:Core/Src/encrypt.c ****   return 0;
 410              		.loc 2 26 10 view .LVU120
 411 0076 0020     		movs	r0, #0
 412              	.LVL39:
 413              	.L18:
  27:Core/Src/encrypt.c **** }
 414              		.loc 2 27 1 view .LVU121
 415 0078 59B0     		add	sp, sp, #356
 416              	.LCFI7:
 417              		.cfi_remember_state
ARM GAS  /tmp/ccqfkvyz.s 			page 14


 418              		.cfi_def_cfa_offset 20
 419              		@ sp needed
 420 007a F0BD     		pop	{r4, r5, r6, r7, pc}
 421              	.LVL40:
 422              	.L27:
 423              	.LCFI8:
 424              		.cfi_restore_state
 425              	.LBB12:
 426              	.LBB9:
  11:Core/Src/encrypt.c ****     }
 427              		.loc 2 11 16 view .LVU122
 428 007c 4FF0FF30 		mov	r0, #-1
 429              	.LVL41:
  11:Core/Src/encrypt.c ****     }
 430              		.loc 2 11 16 view .LVU123
 431 0080 FAE7     		b	.L18
 432              	.LBE9:
 433              	.LBE12:
 434              		.cfi_endproc
 435              	.LFE6:
 437              		.section	.text.encrypt_raw,"ax",%progbits
 438              		.align	1
 439              		.global	encrypt_raw
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 443              		.fpu fpv4-sp-d16
 445              	encrypt_raw:
 446              	.LVL42:
 447              	.LFB7:
  28:Core/Src/encrypt.c **** //data must be a string padded with 0s to the neerst 16 bytes 
  29:Core/Src/encrypt.c **** int encrypt_raw(uint8_t*  data,size_t len,uint8_t*  pass,uint8_t sum[32]){
 448              		.loc 2 29 74 is_stmt 1 view -0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 352
 451              		@ frame_needed = 0, uses_anonymous_args = 0
 452              		.loc 2 29 74 is_stmt 0 view .LVU125
 453 0000 70B5     		push	{r4, r5, r6, lr}
 454              	.LCFI9:
 455              		.cfi_def_cfa_offset 16
 456              		.cfi_offset 4, -16
 457              		.cfi_offset 5, -12
 458              		.cfi_offset 6, -8
 459              		.cfi_offset 14, -4
 460 0002 D8B0     		sub	sp, sp, #352
 461              	.LCFI10:
 462              		.cfi_def_cfa_offset 368
 463 0004 0646     		mov	r6, r0
 464 0006 0D46     		mov	r5, r1
 465 0008 1C46     		mov	r4, r3
  30:Core/Src/encrypt.c ****   SHA256(pass,sum);
 466              		.loc 2 30 3 is_stmt 1 view .LVU126
 467 000a 1946     		mov	r1, r3
 468              	.LVL43:
 469              		.loc 2 30 3 is_stmt 0 view .LVU127
 470 000c 1046     		mov	r0, r2
 471              	.LVL44:
ARM GAS  /tmp/ccqfkvyz.s 			page 15


 472              		.loc 2 30 3 view .LVU128
 473 000e FFF7FEFF 		bl	SHA256
 474              	.LVL45:
  31:Core/Src/encrypt.c **** 	unsigned char key1[176];
 475              		.loc 2 31 2 is_stmt 1 view .LVU129
  32:Core/Src/encrypt.c ****   unsigned char key2[176];
 476              		.loc 2 32 3 view .LVU130
  33:Core/Src/encrypt.c **** 	KeyExpansion(sum, key1);
 477              		.loc 2 33 2 view .LVU131
 478 0012 2CA9     		add	r1, sp, #176
 479 0014 2046     		mov	r0, r4
 480 0016 FFF7FEFF 		bl	KeyExpansion
 481              	.LVL46:
  34:Core/Src/encrypt.c ****   KeyExpansion(sum+16, key2);
 482              		.loc 2 34 3 view .LVU132
 483 001a 6946     		mov	r1, sp
 484 001c 04F11000 		add	r0, r4, #16
 485 0020 FFF7FEFF 		bl	KeyExpansion
 486              	.LVL47:
  35:Core/Src/encrypt.c ****   SHA256(data,sum);
 487              		.loc 2 35 3 view .LVU133
 488 0024 2146     		mov	r1, r4
 489 0026 3046     		mov	r0, r6
 490 0028 FFF7FEFF 		bl	SHA256
 491              	.LVL48:
  36:Core/Src/encrypt.c **** 	for (int i = 0; i < len; i += 16) {
 492              		.loc 2 36 2 view .LVU134
 493              	.LBB13:
 494              		.loc 2 36 7 view .LVU135
 495              		.loc 2 36 11 is_stmt 0 view .LVU136
 496 002c 0024     		movs	r4, #0
 497              	.LVL49:
 498              	.L32:
 499              		.loc 2 36 2 discriminator 1 view .LVU137
 500 002e AC42     		cmp	r4, r5
 501 0030 06D2     		bcs	.L37
  37:Core/Src/encrypt.c **** 		AESEncrypt(data+i, key1, data+i);
 502              		.loc 2 37 3 is_stmt 1 discriminator 3 view .LVU138
 503              		.loc 2 37 18 is_stmt 0 discriminator 3 view .LVU139
 504 0032 3019     		adds	r0, r6, r4
 505              		.loc 2 37 3 discriminator 3 view .LVU140
 506 0034 0246     		mov	r2, r0
 507 0036 2CA9     		add	r1, sp, #176
 508 0038 FFF7FEFF 		bl	AESEncrypt
 509              	.LVL50:
  36:Core/Src/encrypt.c **** 	for (int i = 0; i < len; i += 16) {
 510              		.loc 2 36 29 discriminator 3 view .LVU141
 511 003c 1034     		adds	r4, r4, #16
 512              	.LVL51:
  36:Core/Src/encrypt.c **** 	for (int i = 0; i < len; i += 16) {
 513              		.loc 2 36 29 discriminator 3 view .LVU142
 514 003e F6E7     		b	.L32
 515              	.L37:
  36:Core/Src/encrypt.c **** 	for (int i = 0; i < len; i += 16) {
 516              		.loc 2 36 29 discriminator 3 view .LVU143
 517              	.LBE13:
 518              	.LBB14:
ARM GAS  /tmp/ccqfkvyz.s 			page 16


  38:Core/Src/encrypt.c **** 	}
  39:Core/Src/encrypt.c **** 	for (int i = 0; i < len; i += 16) {
 519              		.loc 2 39 11 view .LVU144
 520 0040 0024     		movs	r4, #0
 521              	.LVL52:
 522              		.loc 2 39 11 view .LVU145
 523 0042 05E0     		b	.L34
 524              	.LVL53:
 525              	.L35:
  40:Core/Src/encrypt.c **** 		AESEncrypt(data+i, key2, data+i);
 526              		.loc 2 40 3 is_stmt 1 discriminator 3 view .LVU146
 527              		.loc 2 40 18 is_stmt 0 discriminator 3 view .LVU147
 528 0044 3019     		adds	r0, r6, r4
 529              		.loc 2 40 3 discriminator 3 view .LVU148
 530 0046 0246     		mov	r2, r0
 531 0048 6946     		mov	r1, sp
 532 004a FFF7FEFF 		bl	AESEncrypt
 533              	.LVL54:
  39:Core/Src/encrypt.c **** 		AESEncrypt(data+i, key2, data+i);
 534              		.loc 2 39 29 discriminator 3 view .LVU149
 535 004e 1034     		adds	r4, r4, #16
 536              	.LVL55:
 537              	.L34:
  39:Core/Src/encrypt.c **** 		AESEncrypt(data+i, key2, data+i);
 538              		.loc 2 39 2 discriminator 1 view .LVU150
 539 0050 AC42     		cmp	r4, r5
 540 0052 F7D3     		bcc	.L35
 541              	.LBE14:
  41:Core/Src/encrypt.c **** 	}
  42:Core/Src/encrypt.c ****   return 0;
 542              		.loc 2 42 3 is_stmt 1 view .LVU151
  43:Core/Src/encrypt.c **** }
 543              		.loc 2 43 1 is_stmt 0 view .LVU152
 544 0054 0020     		movs	r0, #0
 545 0056 58B0     		add	sp, sp, #352
 546              	.LCFI11:
 547              		.cfi_def_cfa_offset 16
 548              		@ sp needed
 549 0058 70BD     		pop	{r4, r5, r6, pc}
 550              		.loc 2 43 1 view .LVU153
 551              		.cfi_endproc
 552              	.LFE7:
 554              		.section	.text.decrypt,"ax",%progbits
 555              		.align	1
 556              		.global	decrypt
 557              		.syntax unified
 558              		.thumb
 559              		.thumb_func
 560              		.fpu fpv4-sp-d16
 562              	decrypt:
 563              	.LVL56:
 564              	.LFB8:
  44:Core/Src/encrypt.c **** 
  45:Core/Src/encrypt.c **** 
  46:Core/Src/encrypt.c **** //data must be a string padded with 0s to the neerst 16 bytes 
  47:Core/Src/encrypt.c **** int decrypt(uint8_t* data,size_t len,uint8_t*  pass,uint8_t  sum[32]){
 565              		.loc 2 47 70 is_stmt 1 view -0
ARM GAS  /tmp/ccqfkvyz.s 			page 17


 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 384
 568              		@ frame_needed = 0, uses_anonymous_args = 0
 569              		.loc 2 47 70 is_stmt 0 view .LVU155
 570 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 571              	.LCFI12:
 572              		.cfi_def_cfa_offset 20
 573              		.cfi_offset 4, -20
 574              		.cfi_offset 5, -16
 575              		.cfi_offset 6, -12
 576              		.cfi_offset 7, -8
 577              		.cfi_offset 14, -4
 578 0002 E1B0     		sub	sp, sp, #388
 579              	.LCFI13:
 580              		.cfi_def_cfa_offset 408
 581 0004 0646     		mov	r6, r0
 582 0006 0D46     		mov	r5, r1
 583 0008 1F46     		mov	r7, r3
  48:Core/Src/encrypt.c ****   uint8_t checksum[32];
 584              		.loc 2 48 3 is_stmt 1 view .LVU156
  49:Core/Src/encrypt.c ****   SHA256(pass,checksum);
 585              		.loc 2 49 3 view .LVU157
 586 000a 58A9     		add	r1, sp, #352
 587              	.LVL57:
 588              		.loc 2 49 3 is_stmt 0 view .LVU158
 589 000c 1046     		mov	r0, r2
 590              	.LVL58:
 591              		.loc 2 49 3 view .LVU159
 592 000e FFF7FEFF 		bl	SHA256
 593              	.LVL59:
  50:Core/Src/encrypt.c **** 	unsigned char key1[176];
 594              		.loc 2 50 2 is_stmt 1 view .LVU160
  51:Core/Src/encrypt.c ****   unsigned char key2[176];
 595              		.loc 2 51 3 view .LVU161
  52:Core/Src/encrypt.c **** 	KeyExpansion(checksum, key1);
 596              		.loc 2 52 2 view .LVU162
 597 0012 2CA9     		add	r1, sp, #176
 598 0014 58A8     		add	r0, sp, #352
 599 0016 FFF7FEFF 		bl	KeyExpansion
 600              	.LVL60:
  53:Core/Src/encrypt.c ****   KeyExpansion(checksum+16, key2);
 601              		.loc 2 53 3 view .LVU163
 602 001a 6946     		mov	r1, sp
 603 001c 5CA8     		add	r0, sp, #368
 604 001e FFF7FEFF 		bl	KeyExpansion
 605              	.LVL61:
  54:Core/Src/encrypt.c **** 	for (int i = 0; i < len; i += 16) {
 606              		.loc 2 54 2 view .LVU164
 607              	.LBB15:
 608              		.loc 2 54 7 view .LVU165
 609              		.loc 2 54 11 is_stmt 0 view .LVU166
 610 0022 0024     		movs	r4, #0
 611              	.LVL62:
 612              	.L39:
 613              		.loc 2 54 2 discriminator 1 view .LVU167
 614 0024 AC42     		cmp	r4, r5
 615 0026 06D2     		bcs	.L46
ARM GAS  /tmp/ccqfkvyz.s 			page 18


  55:Core/Src/encrypt.c **** 		AESDecrypt(data+i, key2, data+i);
 616              		.loc 2 55 3 is_stmt 1 discriminator 3 view .LVU168
 617              		.loc 2 55 18 is_stmt 0 discriminator 3 view .LVU169
 618 0028 3019     		adds	r0, r6, r4
 619              		.loc 2 55 3 discriminator 3 view .LVU170
 620 002a 0246     		mov	r2, r0
 621 002c 6946     		mov	r1, sp
 622 002e FFF7FEFF 		bl	AESDecrypt
 623              	.LVL63:
  54:Core/Src/encrypt.c **** 	for (int i = 0; i < len; i += 16) {
 624              		.loc 2 54 29 discriminator 3 view .LVU171
 625 0032 1034     		adds	r4, r4, #16
 626              	.LVL64:
  54:Core/Src/encrypt.c **** 	for (int i = 0; i < len; i += 16) {
 627              		.loc 2 54 29 discriminator 3 view .LVU172
 628 0034 F6E7     		b	.L39
 629              	.L46:
  54:Core/Src/encrypt.c **** 	for (int i = 0; i < len; i += 16) {
 630              		.loc 2 54 29 discriminator 3 view .LVU173
 631              	.LBE15:
 632              	.LBB16:
  56:Core/Src/encrypt.c **** 	}
  57:Core/Src/encrypt.c **** 	for (int i = 0; i < len; i += 16) {
 633              		.loc 2 57 11 view .LVU174
 634 0036 0024     		movs	r4, #0
 635              	.LVL65:
 636              		.loc 2 57 11 view .LVU175
 637 0038 05E0     		b	.L41
 638              	.LVL66:
 639              	.L42:
  58:Core/Src/encrypt.c **** 		AESDecrypt(data+i, key1, data+i);
 640              		.loc 2 58 3 is_stmt 1 discriminator 3 view .LVU176
 641              		.loc 2 58 18 is_stmt 0 discriminator 3 view .LVU177
 642 003a 3019     		adds	r0, r6, r4
 643              		.loc 2 58 3 discriminator 3 view .LVU178
 644 003c 0246     		mov	r2, r0
 645 003e 2CA9     		add	r1, sp, #176
 646 0040 FFF7FEFF 		bl	AESDecrypt
 647              	.LVL67:
  57:Core/Src/encrypt.c **** 		AESDecrypt(data+i, key1, data+i);
 648              		.loc 2 57 29 discriminator 3 view .LVU179
 649 0044 1034     		adds	r4, r4, #16
 650              	.LVL68:
 651              	.L41:
  57:Core/Src/encrypt.c **** 		AESDecrypt(data+i, key1, data+i);
 652              		.loc 2 57 2 discriminator 1 view .LVU180
 653 0046 AC42     		cmp	r4, r5
 654 0048 F7D3     		bcc	.L42
 655              	.LBE16:
  59:Core/Src/encrypt.c **** 	}
  60:Core/Src/encrypt.c ****   SHA256(data,checksum);
 656              		.loc 2 60 3 is_stmt 1 view .LVU181
 657 004a 58A9     		add	r1, sp, #352
 658 004c 3046     		mov	r0, r6
 659 004e FFF7FEFF 		bl	SHA256
 660              	.LVL69:
  61:Core/Src/encrypt.c ****   if(memcmp(checksum,sum,32))
ARM GAS  /tmp/ccqfkvyz.s 			page 19


 661              		.loc 2 61 3 view .LVU182
 662              		.loc 2 61 6 is_stmt 0 view .LVU183
 663 0052 2022     		movs	r2, #32
 664 0054 3946     		mov	r1, r7
 665 0056 58A8     		add	r0, sp, #352
 666 0058 FFF7FEFF 		bl	memcmp
 667              	.LVL70:
 668              		.loc 2 61 5 view .LVU184
 669 005c 0346     		mov	r3, r0
 670 005e 10B9     		cbnz	r0, .L47
 671              	.L38:
  62:Core/Src/encrypt.c ****     return -2;
  63:Core/Src/encrypt.c ****   return 0;
  64:Core/Src/encrypt.c **** }...
 672              		.loc 2 64 1 view .LVU185
 673 0060 1846     		mov	r0, r3
 674 0062 61B0     		add	sp, sp, #388
 675              	.LCFI14:
 676              		.cfi_remember_state
 677              		.cfi_def_cfa_offset 20
 678              		@ sp needed
 679 0064 F0BD     		pop	{r4, r5, r6, r7, pc}
 680              	.LVL71:
 681              	.L47:
 682              	.LCFI15:
 683              		.cfi_restore_state
  62:Core/Src/encrypt.c ****     return -2;
 684              		.loc 2 62 12 view .LVU186
 685 0066 6FF00103 		mvn	r3, #1
 686 006a F9E7     		b	.L38
 687              		.cfi_endproc
 688              	.LFE8:
 690              		.section	.rodata.rcon,"a"
 691              		.align	2
 692              		.set	.LANCHOR1,. + 0
 695              	rcon:
 696 0000 8D       		.byte	-115
 697 0001 01       		.byte	1
 698 0002 02       		.byte	2
 699 0003 04       		.byte	4
 700 0004 08       		.byte	8
 701 0005 10       		.byte	16
 702 0006 20       		.byte	32
 703 0007 40       		.byte	64
 704 0008 80       		.byte	-128
 705 0009 1B       		.byte	27
 706 000a 36       		.byte	54
 707 000b 6C       		.byte	108
 708 000c D8       		.byte	-40
 709 000d AB       		.byte	-85
 710 000e 4D       		.byte	77
 711 000f 9A       		.byte	-102
 712 0010 2F       		.byte	47
 713 0011 5E       		.byte	94
 714 0012 BC       		.byte	-68
 715 0013 63       		.byte	99
 716 0014 C6       		.byte	-58
ARM GAS  /tmp/ccqfkvyz.s 			page 20


 717 0015 97       		.byte	-105
 718 0016 35       		.byte	53
 719 0017 6A       		.byte	106
 720 0018 D4       		.byte	-44
 721 0019 B3       		.byte	-77
 722 001a 7D       		.byte	125
 723 001b FA       		.byte	-6
 724 001c EF       		.byte	-17
 725 001d C5       		.byte	-59
 726 001e 91       		.byte	-111
 727 001f 39       		.byte	57
 728 0020 72       		.byte	114
 729 0021 E4       		.byte	-28
 730 0022 D3       		.byte	-45
 731 0023 BD       		.byte	-67
 732 0024 61       		.byte	97
 733 0025 C2       		.byte	-62
 734 0026 9F       		.byte	-97
 735 0027 25       		.byte	37
 736 0028 4A       		.byte	74
 737 0029 94       		.byte	-108
 738 002a 33       		.byte	51
 739 002b 66       		.byte	102
 740 002c CC       		.byte	-52
 741 002d 83       		.byte	-125
 742 002e 1D       		.byte	29
 743 002f 3A       		.byte	58
 744 0030 74       		.byte	116
 745 0031 E8       		.byte	-24
 746 0032 CB       		.byte	-53
 747 0033 8D       		.byte	-115
 748 0034 01       		.byte	1
 749 0035 02       		.byte	2
 750 0036 04       		.byte	4
 751 0037 08       		.byte	8
 752 0038 10       		.byte	16
 753 0039 20       		.byte	32
 754 003a 40       		.byte	64
 755 003b 80       		.byte	-128
 756 003c 1B       		.byte	27
 757 003d 36       		.byte	54
 758 003e 6C       		.byte	108
 759 003f D8       		.byte	-40
 760 0040 AB       		.byte	-85
 761 0041 4D       		.byte	77
 762 0042 9A       		.byte	-102
 763 0043 2F       		.byte	47
 764 0044 5E       		.byte	94
 765 0045 BC       		.byte	-68
 766 0046 63       		.byte	99
 767 0047 C6       		.byte	-58
 768 0048 97       		.byte	-105
 769 0049 35       		.byte	53
 770 004a 6A       		.byte	106
 771 004b D4       		.byte	-44
 772 004c B3       		.byte	-77
 773 004d 7D       		.byte	125
ARM GAS  /tmp/ccqfkvyz.s 			page 21


 774 004e FA       		.byte	-6
 775 004f EF       		.byte	-17
 776 0050 C5       		.byte	-59
 777 0051 91       		.byte	-111
 778 0052 39       		.byte	57
 779 0053 72       		.byte	114
 780 0054 E4       		.byte	-28
 781 0055 D3       		.byte	-45
 782 0056 BD       		.byte	-67
 783 0057 61       		.byte	97
 784 0058 C2       		.byte	-62
 785 0059 9F       		.byte	-97
 786 005a 25       		.byte	37
 787 005b 4A       		.byte	74
 788 005c 94       		.byte	-108
 789 005d 33       		.byte	51
 790 005e 66       		.byte	102
 791 005f CC       		.byte	-52
 792 0060 83       		.byte	-125
 793 0061 1D       		.byte	29
 794 0062 3A       		.byte	58
 795 0063 74       		.byte	116
 796 0064 E8       		.byte	-24
 797 0065 CB       		.byte	-53
 798 0066 8D       		.byte	-115
 799 0067 01       		.byte	1
 800 0068 02       		.byte	2
 801 0069 04       		.byte	4
 802 006a 08       		.byte	8
 803 006b 10       		.byte	16
 804 006c 20       		.byte	32
 805 006d 40       		.byte	64
 806 006e 80       		.byte	-128
 807 006f 1B       		.byte	27
 808 0070 36       		.byte	54
 809 0071 6C       		.byte	108
 810 0072 D8       		.byte	-40
 811 0073 AB       		.byte	-85
 812 0074 4D       		.byte	77
 813 0075 9A       		.byte	-102
 814 0076 2F       		.byte	47
 815 0077 5E       		.byte	94
 816 0078 BC       		.byte	-68
 817 0079 63       		.byte	99
 818 007a C6       		.byte	-58
 819 007b 97       		.byte	-105
 820 007c 35       		.byte	53
 821 007d 6A       		.byte	106
 822 007e D4       		.byte	-44
 823 007f B3       		.byte	-77
 824 0080 7D       		.byte	125
 825 0081 FA       		.byte	-6
 826 0082 EF       		.byte	-17
 827 0083 C5       		.byte	-59
 828 0084 91       		.byte	-111
 829 0085 39       		.byte	57
 830 0086 72       		.byte	114
ARM GAS  /tmp/ccqfkvyz.s 			page 22


 831 0087 E4       		.byte	-28
 832 0088 D3       		.byte	-45
 833 0089 BD       		.byte	-67
 834 008a 61       		.byte	97
 835 008b C2       		.byte	-62
 836 008c 9F       		.byte	-97
 837 008d 25       		.byte	37
 838 008e 4A       		.byte	74
 839 008f 94       		.byte	-108
 840 0090 33       		.byte	51
 841 0091 66       		.byte	102
 842 0092 CC       		.byte	-52
 843 0093 83       		.byte	-125
 844 0094 1D       		.byte	29
 845 0095 3A       		.byte	58
 846 0096 74       		.byte	116
 847 0097 E8       		.byte	-24
 848 0098 CB       		.byte	-53
 849 0099 8D       		.byte	-115
 850 009a 01       		.byte	1
 851 009b 02       		.byte	2
 852 009c 04       		.byte	4
 853 009d 08       		.byte	8
 854 009e 10       		.byte	16
 855 009f 20       		.byte	32
 856 00a0 40       		.byte	64
 857 00a1 80       		.byte	-128
 858 00a2 1B       		.byte	27
 859 00a3 36       		.byte	54
 860 00a4 6C       		.byte	108
 861 00a5 D8       		.byte	-40
 862 00a6 AB       		.byte	-85
 863 00a7 4D       		.byte	77
 864 00a8 9A       		.byte	-102
 865 00a9 2F       		.byte	47
 866 00aa 5E       		.byte	94
 867 00ab BC       		.byte	-68
 868 00ac 63       		.byte	99
 869 00ad C6       		.byte	-58
 870 00ae 97       		.byte	-105
 871 00af 35       		.byte	53
 872 00b0 6A       		.byte	106
 873 00b1 D4       		.byte	-44
 874 00b2 B3       		.byte	-77
 875 00b3 7D       		.byte	125
 876 00b4 FA       		.byte	-6
 877 00b5 EF       		.byte	-17
 878 00b6 C5       		.byte	-59
 879 00b7 91       		.byte	-111
 880 00b8 39       		.byte	57
 881 00b9 72       		.byte	114
 882 00ba E4       		.byte	-28
 883 00bb D3       		.byte	-45
 884 00bc BD       		.byte	-67
 885 00bd 61       		.byte	97
 886 00be C2       		.byte	-62
 887 00bf 9F       		.byte	-97
ARM GAS  /tmp/ccqfkvyz.s 			page 23


 888 00c0 25       		.byte	37
 889 00c1 4A       		.byte	74
 890 00c2 94       		.byte	-108
 891 00c3 33       		.byte	51
 892 00c4 66       		.byte	102
 893 00c5 CC       		.byte	-52
 894 00c6 83       		.byte	-125
 895 00c7 1D       		.byte	29
 896 00c8 3A       		.byte	58
 897 00c9 74       		.byte	116
 898 00ca E8       		.byte	-24
 899 00cb CB       		.byte	-53
 900 00cc 8D       		.byte	-115
 901 00cd 01       		.byte	1
 902 00ce 02       		.byte	2
 903 00cf 04       		.byte	4
 904 00d0 08       		.byte	8
 905 00d1 10       		.byte	16
 906 00d2 20       		.byte	32
 907 00d3 40       		.byte	64
 908 00d4 80       		.byte	-128
 909 00d5 1B       		.byte	27
 910 00d6 36       		.byte	54
 911 00d7 6C       		.byte	108
 912 00d8 D8       		.byte	-40
 913 00d9 AB       		.byte	-85
 914 00da 4D       		.byte	77
 915 00db 9A       		.byte	-102
 916 00dc 2F       		.byte	47
 917 00dd 5E       		.byte	94
 918 00de BC       		.byte	-68
 919 00df 63       		.byte	99
 920 00e0 C6       		.byte	-58
 921 00e1 97       		.byte	-105
 922 00e2 35       		.byte	53
 923 00e3 6A       		.byte	106
 924 00e4 D4       		.byte	-44
 925 00e5 B3       		.byte	-77
 926 00e6 7D       		.byte	125
 927 00e7 FA       		.byte	-6
 928 00e8 EF       		.byte	-17
 929 00e9 C5       		.byte	-59
 930 00ea 91       		.byte	-111
 931 00eb 39       		.byte	57
 932 00ec 72       		.byte	114
 933 00ed E4       		.byte	-28
 934 00ee D3       		.byte	-45
 935 00ef BD       		.byte	-67
 936 00f0 61       		.byte	97
 937 00f1 C2       		.byte	-62
 938 00f2 9F       		.byte	-97
 939 00f3 25       		.byte	37
 940 00f4 4A       		.byte	74
 941 00f5 94       		.byte	-108
 942 00f6 33       		.byte	51
 943 00f7 66       		.byte	102
 944 00f8 CC       		.byte	-52
ARM GAS  /tmp/ccqfkvyz.s 			page 24


 945 00f9 83       		.byte	-125
 946 00fa 1D       		.byte	29
 947 00fb 3A       		.byte	58
 948 00fc 74       		.byte	116
 949 00fd E8       		.byte	-24
 950 00fe CB       		.byte	-53
 951 00ff 8D       		.byte	-115
 952              		.section	.rodata.s,"a"
 953              		.align	2
 954              		.set	.LANCHOR0,. + 0
 957              	s:
 958 0000 63       		.byte	99
 959 0001 7C       		.byte	124
 960 0002 77       		.byte	119
 961 0003 7B       		.byte	123
 962 0004 F2       		.byte	-14
 963 0005 6B       		.byte	107
 964 0006 6F       		.byte	111
 965 0007 C5       		.byte	-59
 966 0008 30       		.byte	48
 967 0009 01       		.byte	1
 968 000a 67       		.byte	103
 969 000b 2B       		.byte	43
 970 000c FE       		.byte	-2
 971 000d D7       		.byte	-41
 972 000e AB       		.byte	-85
 973 000f 76       		.byte	118
 974 0010 CA       		.byte	-54
 975 0011 82       		.byte	-126
 976 0012 C9       		.byte	-55
 977 0013 7D       		.byte	125
 978 0014 FA       		.byte	-6
 979 0015 59       		.byte	89
 980 0016 47       		.byte	71
 981 0017 F0       		.byte	-16
 982 0018 AD       		.byte	-83
 983 0019 D4       		.byte	-44
 984 001a A2       		.byte	-94
 985 001b AF       		.byte	-81
 986 001c 9C       		.byte	-100
 987 001d A4       		.byte	-92
 988 001e 72       		.byte	114
 989 001f C0       		.byte	-64
 990 0020 B7       		.byte	-73
 991 0021 FD       		.byte	-3
 992 0022 93       		.byte	-109
 993 0023 26       		.byte	38
 994 0024 36       		.byte	54
 995 0025 3F       		.byte	63
 996 0026 F7       		.byte	-9
 997 0027 CC       		.byte	-52
 998 0028 34       		.byte	52
 999 0029 A5       		.byte	-91
 1000 002a E5       		.byte	-27
 1001 002b F1       		.byte	-15
 1002 002c 71       		.byte	113
 1003 002d D8       		.byte	-40
ARM GAS  /tmp/ccqfkvyz.s 			page 25


 1004 002e 31       		.byte	49
 1005 002f 15       		.byte	21
 1006 0030 04       		.byte	4
 1007 0031 C7       		.byte	-57
 1008 0032 23       		.byte	35
 1009 0033 C3       		.byte	-61
 1010 0034 18       		.byte	24
 1011 0035 96       		.byte	-106
 1012 0036 05       		.byte	5
 1013 0037 9A       		.byte	-102
 1014 0038 07       		.byte	7
 1015 0039 12       		.byte	18
 1016 003a 80       		.byte	-128
 1017 003b E2       		.byte	-30
 1018 003c EB       		.byte	-21
 1019 003d 27       		.byte	39
 1020 003e B2       		.byte	-78
 1021 003f 75       		.byte	117
 1022 0040 09       		.byte	9
 1023 0041 83       		.byte	-125
 1024 0042 2C       		.byte	44
 1025 0043 1A       		.byte	26
 1026 0044 1B       		.byte	27
 1027 0045 6E       		.byte	110
 1028 0046 5A       		.byte	90
 1029 0047 A0       		.byte	-96
 1030 0048 52       		.byte	82
 1031 0049 3B       		.byte	59
 1032 004a D6       		.byte	-42
 1033 004b B3       		.byte	-77
 1034 004c 29       		.byte	41
 1035 004d E3       		.byte	-29
 1036 004e 2F       		.byte	47
 1037 004f 84       		.byte	-124
 1038 0050 53       		.byte	83
 1039 0051 D1       		.byte	-47
 1040 0052 00       		.byte	0
 1041 0053 ED       		.byte	-19
 1042 0054 20       		.byte	32
 1043 0055 FC       		.byte	-4
 1044 0056 B1       		.byte	-79
 1045 0057 5B       		.byte	91
 1046 0058 6A       		.byte	106
 1047 0059 CB       		.byte	-53
 1048 005a BE       		.byte	-66
 1049 005b 39       		.byte	57
 1050 005c 4A       		.byte	74
 1051 005d 4C       		.byte	76
 1052 005e 58       		.byte	88
 1053 005f CF       		.byte	-49
 1054 0060 D0       		.byte	-48
 1055 0061 EF       		.byte	-17
 1056 0062 AA       		.byte	-86
 1057 0063 FB       		.byte	-5
 1058 0064 43       		.byte	67
 1059 0065 4D       		.byte	77
 1060 0066 33       		.byte	51
ARM GAS  /tmp/ccqfkvyz.s 			page 26


 1061 0067 85       		.byte	-123
 1062 0068 45       		.byte	69
 1063 0069 F9       		.byte	-7
 1064 006a 02       		.byte	2
 1065 006b 7F       		.byte	127
 1066 006c 50       		.byte	80
 1067 006d 3C       		.byte	60
 1068 006e 9F       		.byte	-97
 1069 006f A8       		.byte	-88
 1070 0070 51       		.byte	81
 1071 0071 A3       		.byte	-93
 1072 0072 40       		.byte	64
 1073 0073 8F       		.byte	-113
 1074 0074 92       		.byte	-110
 1075 0075 9D       		.byte	-99
 1076 0076 38       		.byte	56
 1077 0077 F5       		.byte	-11
 1078 0078 BC       		.byte	-68
 1079 0079 B6       		.byte	-74
 1080 007a DA       		.byte	-38
 1081 007b 21       		.byte	33
 1082 007c 10       		.byte	16
 1083 007d FF       		.byte	-1
 1084 007e F3       		.byte	-13
 1085 007f D2       		.byte	-46
 1086 0080 CD       		.byte	-51
 1087 0081 0C       		.byte	12
 1088 0082 13       		.byte	19
 1089 0083 EC       		.byte	-20
 1090 0084 5F       		.byte	95
 1091 0085 97       		.byte	-105
 1092 0086 44       		.byte	68
 1093 0087 17       		.byte	23
 1094 0088 C4       		.byte	-60
 1095 0089 A7       		.byte	-89
 1096 008a 7E       		.byte	126
 1097 008b 3D       		.byte	61
 1098 008c 64       		.byte	100
 1099 008d 5D       		.byte	93
 1100 008e 19       		.byte	25
 1101 008f 73       		.byte	115
 1102 0090 60       		.byte	96
 1103 0091 81       		.byte	-127
 1104 0092 4F       		.byte	79
 1105 0093 DC       		.byte	-36
 1106 0094 22       		.byte	34
 1107 0095 2A       		.byte	42
 1108 0096 90       		.byte	-112
 1109 0097 88       		.byte	-120
 1110 0098 46       		.byte	70
 1111 0099 EE       		.byte	-18
 1112 009a B8       		.byte	-72
 1113 009b 14       		.byte	20
 1114 009c DE       		.byte	-34
 1115 009d 5E       		.byte	94
 1116 009e 0B       		.byte	11
 1117 009f DB       		.byte	-37
ARM GAS  /tmp/ccqfkvyz.s 			page 27


 1118 00a0 E0       		.byte	-32
 1119 00a1 32       		.byte	50
 1120 00a2 3A       		.byte	58
 1121 00a3 0A       		.byte	10
 1122 00a4 49       		.byte	73
 1123 00a5 06       		.byte	6
 1124 00a6 24       		.byte	36
 1125 00a7 5C       		.byte	92
 1126 00a8 C2       		.byte	-62
 1127 00a9 D3       		.byte	-45
 1128 00aa AC       		.byte	-84
 1129 00ab 62       		.byte	98
 1130 00ac 91       		.byte	-111
 1131 00ad 95       		.byte	-107
 1132 00ae E4       		.byte	-28
 1133 00af 79       		.byte	121
 1134 00b0 E7       		.byte	-25
 1135 00b1 C8       		.byte	-56
 1136 00b2 37       		.byte	55
 1137 00b3 6D       		.byte	109
 1138 00b4 8D       		.byte	-115
 1139 00b5 D5       		.byte	-43
 1140 00b6 4E       		.byte	78
 1141 00b7 A9       		.byte	-87
 1142 00b8 6C       		.byte	108
 1143 00b9 56       		.byte	86
 1144 00ba F4       		.byte	-12
 1145 00bb EA       		.byte	-22
 1146 00bc 65       		.byte	101
 1147 00bd 7A       		.byte	122
 1148 00be AE       		.byte	-82
 1149 00bf 08       		.byte	8
 1150 00c0 BA       		.byte	-70
 1151 00c1 78       		.byte	120
 1152 00c2 25       		.byte	37
 1153 00c3 2E       		.byte	46
 1154 00c4 1C       		.byte	28
 1155 00c5 A6       		.byte	-90
 1156 00c6 B4       		.byte	-76
 1157 00c7 C6       		.byte	-58
 1158 00c8 E8       		.byte	-24
 1159 00c9 DD       		.byte	-35
 1160 00ca 74       		.byte	116
 1161 00cb 1F       		.byte	31
 1162 00cc 4B       		.byte	75
 1163 00cd BD       		.byte	-67
 1164 00ce 8B       		.byte	-117
 1165 00cf 8A       		.byte	-118
 1166 00d0 70       		.byte	112
 1167 00d1 3E       		.byte	62
 1168 00d2 B5       		.byte	-75
 1169 00d3 66       		.byte	102
 1170 00d4 48       		.byte	72
 1171 00d5 03       		.byte	3
 1172 00d6 F6       		.byte	-10
 1173 00d7 0E       		.byte	14
 1174 00d8 61       		.byte	97
ARM GAS  /tmp/ccqfkvyz.s 			page 28


 1175 00d9 35       		.byte	53
 1176 00da 57       		.byte	87
 1177 00db B9       		.byte	-71
 1178 00dc 86       		.byte	-122
 1179 00dd C1       		.byte	-63
 1180 00de 1D       		.byte	29
 1181 00df 9E       		.byte	-98
 1182 00e0 E1       		.byte	-31
 1183 00e1 F8       		.byte	-8
 1184 00e2 98       		.byte	-104
 1185 00e3 11       		.byte	17
 1186 00e4 69       		.byte	105
 1187 00e5 D9       		.byte	-39
 1188 00e6 8E       		.byte	-114
 1189 00e7 94       		.byte	-108
 1190 00e8 9B       		.byte	-101
 1191 00e9 1E       		.byte	30
 1192 00ea 87       		.byte	-121
 1193 00eb E9       		.byte	-23
 1194 00ec CE       		.byte	-50
 1195 00ed 55       		.byte	85
 1196 00ee 28       		.byte	40
 1197 00ef DF       		.byte	-33
 1198 00f0 8C       		.byte	-116
 1199 00f1 A1       		.byte	-95
 1200 00f2 89       		.byte	-119
 1201 00f3 0D       		.byte	13
 1202 00f4 BF       		.byte	-65
 1203 00f5 E6       		.byte	-26
 1204 00f6 42       		.byte	66
 1205 00f7 68       		.byte	104
 1206 00f8 41       		.byte	65
 1207 00f9 99       		.byte	-103
 1208 00fa 2D       		.byte	45
 1209 00fb 0F       		.byte	15
 1210 00fc B0       		.byte	-80
 1211 00fd 54       		.byte	84
 1212 00fe BB       		.byte	-69
 1213 00ff 16       		.byte	22
 1214              		.text
 1215              	.Letext0:
 1216              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 1217              		.file 4 "/usr/lib/gcc/arm-none-eabi/8.3.1/include/stddef.h"
 1218              		.file 5 "/usr/include/newlib/sys/_types.h"
 1219              		.file 6 "/usr/include/newlib/sys/reent.h"
 1220              		.file 7 "/usr/include/newlib/sys/lock.h"
 1221              		.file 8 "/usr/include/newlib/sys/_stdint.h"
 1222              		.file 9 "/usr/include/newlib/stdlib.h"
 1223              		.file 10 "Core/Inc/aes.h"
 1224              		.file 11 "Core/Inc/sha256.h"
 1225              		.file 12 "/usr/include/newlib/string.h"
ARM GAS  /tmp/ccqfkvyz.s 			page 29


DEFINED SYMBOLS
                            *ABS*:0000000000000000 encrypt.c
     /tmp/ccqfkvyz.s:18     .text.KeyExpansionCore:0000000000000000 $t
     /tmp/ccqfkvyz.s:25     .text.KeyExpansionCore:0000000000000000 KeyExpansionCore
     /tmp/ccqfkvyz.s:94     .text.KeyExpansionCore:0000000000000028 $d
     /tmp/ccqfkvyz.s:100    .text.KeyExpansion:0000000000000000 $t
     /tmp/ccqfkvyz.s:106    .text.KeyExpansion:0000000000000000 KeyExpansion
     /tmp/ccqfkvyz.s:256    .text.encrypt:0000000000000000 $t
     /tmp/ccqfkvyz.s:263    .text.encrypt:0000000000000000 encrypt
     /tmp/ccqfkvyz.s:438    .text.encrypt_raw:0000000000000000 $t
     /tmp/ccqfkvyz.s:445    .text.encrypt_raw:0000000000000000 encrypt_raw
     /tmp/ccqfkvyz.s:555    .text.decrypt:0000000000000000 $t
     /tmp/ccqfkvyz.s:562    .text.decrypt:0000000000000000 decrypt
     /tmp/ccqfkvyz.s:691    .rodata.rcon:0000000000000000 $d
     /tmp/ccqfkvyz.s:695    .rodata.rcon:0000000000000000 rcon
     /tmp/ccqfkvyz.s:953    .rodata.s:0000000000000000 $d
     /tmp/ccqfkvyz.s:957    .rodata.s:0000000000000000 s

UNDEFINED SYMBOLS
strlen
SHA256
AESEncrypt
AESDecrypt
memcmp

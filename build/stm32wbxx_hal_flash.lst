ARM GAS  /tmp/cctRLtgk.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32wbxx_hal_flash.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.FLASH_Program_DoubleWord,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	FLASH_Program_DoubleWord:
  26              	.LVL0:
  27              	.LFB955:
  28              		.file 1 "Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c"
   1:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
   2:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   ******************************************************************************
   3:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @file    stm32wbxx_hal_flash.c
   4:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @author  MCD Application Team
   5:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief   FLASH HAL module driver.
   6:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *          functionalities of the internal FLASH memory:
   8:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *           + Program operations functions
   9:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *           + Memory Control functions
  10:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *           + Peripheral Errors functions
  11:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *
  12:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  @verbatim
  13:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   ==============================================================================
  14:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                         ##### FLASH peripheral features #####
  15:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   ==============================================================================
  16:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  17:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   [..] The Flash memory interface manages CPU AHB I-Code and D-Code accesses
  18:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****        to the Flash memory. It implements the erase and program Flash memory operations
  19:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****        and the read and write protection mechanisms.
  20:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  21:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   [..] The Flash memory interface accelerates code execution with a system of instruction
  22:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****        prefetch and cache lines.
  23:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  24:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   [..] The FLASH main features are:
  25:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) Flash memory read operations
  26:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) Flash memory program/erase operations
  27:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) Program and Erase suspension
  28:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) Read / write protections (2 areas per features)
  29:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) CPU2 Security area
  30:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) Option bytes programming
ARM GAS  /tmp/cctRLtgk.s 			page 2


  31:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) Prefetch on CPU1 I-Code and CPU2 S-bus
  32:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) 32 instruction cache lines of 4*64 bits on I-Code for CPU1
  33:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) 8 data cache lines of 4*64 bits on D-Code for CPU1
  34:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) 4 instruction cache lines of 1*64 bits on S-bus for CPU2
  35:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) 4 data cache lines of 1*64 bits on S-Bus for CPU2
  36:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (+) Error code correction (ECC) : Data in flash are 72-bits word
  37:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****           (8 bits added per double word)
  38:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  39:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                         ##### How to use this driver #####
  40:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  ==============================================================================
  41:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     [..]
  42:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       This driver provides functions and macros to configure and program the FLASH
  43:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       memory of all STM32WBxx devices.
  44:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  45:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (#) Flash Memory IO Programming functions:
  46:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****            (++) Lock and Unlock the FLASH interface using HAL_FLASH_Unlock() and
  47:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                 HAL_FLASH_Lock() functions
  48:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****            (++) Program functions: double word and fast program (full row programming)
  49:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****            (++) There are two modes of programming:
  50:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****             (+++) Polling mode using HAL_FLASH_Program() function
  51:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****             (+++) Interrupt mode using HAL_FLASH_Program_IT() function
  52:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  53:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (#) Interrupts and flags management functions:
  54:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****            (++) Handle FLASH interrupts by calling HAL_FLASH_IRQHandler()
  55:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****            (++) Callback functions are called when the flash operations are finished :
  56:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                 HAL_FLASH_EndOfOperationCallback() when everything is ok, otherwise
  57:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                 HAL_FLASH_OperationErrorCallback()
  58:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****            (++) Get error flag status by calling HAL_GetError()
  59:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  60:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       (#) Option bytes management functions :
  61:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****            (++) Lock and Unlock the option bytes using HAL_FLASH_OB_Unlock() and
  62:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                 HAL_FLASH_OB_Lock() functions
  63:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****            (++) Launch the reload of the option bytes using HAL_FLASH_OB_Launch() function.
  64:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                 In this case, a reset is generated
  65:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  66:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     [..]
  67:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       In addition to these functions, this driver includes a set of macros allowing
  68:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       to handle the following operations:
  69:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****        (+) Set the latency
  70:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****        (+) Enable/Disable the prefetch buffer
  71:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****        (+) Enable/Disable the suspend program or erase request
  72:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****        (+) Enable/Disable the Instruction cache and the Data cache
  73:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****        (+) Reset the Instruction cache and the Data cache
  74:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****        (+) Enable/Disable the Flash interrupts
  75:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****        (+) Monitor the Flash flags status
  76:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  77:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  @endverbatim
  78:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   ******************************************************************************
  79:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @attention
  80:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *
  81:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  82:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * All rights reserved.</center></h2>
  83:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *
  84:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  85:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * the "License"; You may not use this file except in compliance with the
  86:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * License. You may obtain a copy of the License at:
  87:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                        opensource.org/licenses/BSD-3-Clause
ARM GAS  /tmp/cctRLtgk.s 			page 3


  88:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *
  89:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   ******************************************************************************
  90:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
  91:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  92:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /* Includes ------------------------------------------------------------------*/
  93:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** #include "stm32wbxx_hal.h"
  94:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  95:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /** @addtogroup STM32WBxx_HAL_Driver
  96:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @{
  97:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
  98:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
  99:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /** @defgroup FLASH FLASH
 100:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief FLASH HAL module driver
 101:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @{
 102:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 103:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 104:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** #ifdef HAL_FLASH_MODULE_ENABLED
 105:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 106:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /* Private typedef -----------------------------------------------------------*/
 107:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /* Private defines -----------------------------------------------------------*/
 108:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /** @addtogroup FLASH_Private_Constants
 109:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @{
 110:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 111:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** #define FLASH_NB_DOUBLE_WORDS_IN_ROW  64
 112:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 113:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @}
 114:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 115:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 116:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /* Private macros ------------------------------------------------------------*/
 117:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /* Private variables ---------------------------------------------------------*/
 118:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /** @defgroup FLASH_Private_Variables FLASH Private Variables
 119:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  * @{
 120:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  */
 121:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 122:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Variable used for Program/Erase sectors under interruption
 123:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 124:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** FLASH_ProcessTypeDef pFlash = {.Lock = HAL_UNLOCKED, \
 125:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                                .ErrorCode = HAL_FLASH_ERROR_NONE, \
 126:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                                .ProcedureOnGoing = 0U, \
 127:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                                .Address = 0U, \
 128:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                                .Page = 0U, \
 129:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                                .NbPagesToErase = 0U
 130:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                               };
 131:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 132:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @}
 133:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 134:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 135:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /* Private function prototypes -----------------------------------------------*/
 136:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /** @defgroup FLASH_Private_Functions FLASH Private Functions
 137:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  * @{
 138:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  */
 139:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** static void          FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data);
 140:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** static void          FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress);
 141:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 142:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @}
 143:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 144:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
ARM GAS  /tmp/cctRLtgk.s 			page 4


 145:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /* Exported functions --------------------------------------------------------*/
 146:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions FLASH Exported Functions
 147:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @{
 148:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 149:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 150:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group1 Programming operation functions
 151:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  *  @brief   Programming operation functions
 152:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  *
 153:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** @verbatim
 154:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  ===============================================================================
 155:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                   ##### Programming operation functions #####
 156:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  ===============================================================================
 157:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     [..]
 158:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     This subsection provides a set of functions allowing to manage the FLASH
 159:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     program operations.
 160:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 161:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** @endverbatim
 162:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @{
 163:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 164:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 165:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 166:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Program double word or fast program of a row at a specified address.
 167:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @note   Before any operation, it is possible to check there is no operation suspended
 168:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *         by call HAL_FLASHEx_IsOperationSuspended()
 169:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  TypeProgram Indicate the way to program at a specified address
 170:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                       This parameter can be a value of @ref FLASH_TYPE_PROGRAM
 171:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  Address Specifies the address to be programmed.
 172:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  Data Specifies the data to be programmed
 173:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                This parameter is the data for the double word program and the address where
 174:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                are stored the data for the row fast program.
 175:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *
 176:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval HAL_StatusTypeDef HAL Status
 177:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 178:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
 179:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 180:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status;
 181:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 182:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Check the parameters */
 183:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 184:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   assert_param(IS_ADDR_ALIGNED_64BITS(Address));
 185:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 186:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 187:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Process Locked */
 188:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   __HAL_LOCK(&pFlash);
 189:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 190:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Reset error code */
 191:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 192:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 193:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Verify that next operation can be proceed */
 194:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 195:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 196:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if (status == HAL_OK)
 197:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 198:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 199:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 200:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       /* Check the parameters */
 201:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
ARM GAS  /tmp/cctRLtgk.s 			page 5


 202:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 203:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       /* Program double-word (64-bit) at a specified address */
 204:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       FLASH_Program_DoubleWord(Address, Data);
 205:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 206:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     else
 207:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 208:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       /* Check the parameters */
 209:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));
 210:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 211:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       /* Fast program a 64 row double-word (64-bit) at a specified address */
 212:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       FLASH_Program_Fast(Address, (uint32_t)Data);
 213:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 214:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 215:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Wait for last operation to be completed */
 216:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 217:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 218:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* If the program operation is completed, disable the PG or FSTPG Bit */
 219:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     CLEAR_BIT(FLASH->CR, TypeProgram);
 220:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 221:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 222:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Process Unlocked */
 223:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   __HAL_UNLOCK(&pFlash);
 224:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 225:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* return status */
 226:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   return status;
 227:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 228:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 229:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 230:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Program double word or fast program of a row at a specified address with interrupt enab
 231:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @note   Before any operation, it is possible to check there is no operation suspended
 232:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *         by call HAL_FLASHEx_IsOperationSuspended()
 233:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  TypeProgram Indicate the way to program at a specified address.
 234:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                           This parameter can be a value of @ref FLASH_TYPE_PROGRAM
 235:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  Address Specifies the address to be programmed.
 236:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  Data Specifies the data to be programmed
 237:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                This parameter is the data for the double word program and the address where
 238:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                are stored the data for the row fast program.
 239:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *
 240:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval HAL Status
 241:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 242:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
 243:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 244:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status;
 245:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 246:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Check the parameters */
 247:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 248:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   assert_param(IS_ADDR_ALIGNED_64BITS(Address));
 249:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 250:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 251:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Process Locked */
 252:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   __HAL_LOCK(&pFlash);
 253:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 254:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Reset error code */
 255:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 256:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 257:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Verify that next operation can be proceed */
 258:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
ARM GAS  /tmp/cctRLtgk.s 			page 6


 259:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 260:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if (status != HAL_OK)
 261:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 262:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Process Unlocked */
 263:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     __HAL_UNLOCK(&pFlash);
 264:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 265:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   else
 266:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 267:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Set internal variables used by the IRQ handler */
 268:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     pFlash.ProcedureOnGoing = TypeProgram;
 269:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     pFlash.Address = Address;
 270:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 271:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Enable End of Operation and Error interrupts */
 272:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 273:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 274:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 275:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 276:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       /* Check the parameters */
 277:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 278:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 279:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       /* Program double-word (64-bit) at a specified address */
 280:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       FLASH_Program_DoubleWord(Address, Data);
 281:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 282:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     else
 283:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 284:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       /* Check the parameters */
 285:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));
 286:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 287:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       /* Fast program a 64 row double-word (64-bit) at a specified address */
 288:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       FLASH_Program_Fast(Address, (uint32_t)Data);
 289:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 290:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 291:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 292:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* return status */
 293:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   return status;
 294:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 295:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 296:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 297:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief Handle FLASH interrupt request.
 298:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval None
 299:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 300:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** void HAL_FLASH_IRQHandler(void)
 301:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 302:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint32_t param = 0xFFFFFFFFU;
 303:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint32_t error;
 304:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 305:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Check FLASH operation error flags */
 306:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 307:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 308:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Clear Current operation */
 309:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 310:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 311:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* A] Set parameter for user or error callbacks */
 312:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* check operation was a program or erase */
 313:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 314:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 315:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* return adress being programmed */
ARM GAS  /tmp/cctRLtgk.s 			page 7


 316:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     param = pFlash.Address;
 317:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 318:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_PAGES)) != 0U)
 319:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 320:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* return page number being erased */
 321:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     param = pFlash.Page;
 322:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 323:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   else
 324:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 325:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* No Procedure on-going */
 326:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Nothing to do, but check error if any */
 327:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 328:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 329:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* B] Check errors */
 330:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if (error != 0U)
 331:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 332:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /*Save the error code*/
 333:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     pFlash.ErrorCode |= error;
 334:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 335:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* clear error flags */
 336:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(error);
 337:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 338:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /*Stop the procedure ongoing*/
 339:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 340:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 341:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Error callback */
 342:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     HAL_FLASH_OperationErrorCallback(param);
 343:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 344:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 345:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* C] Check FLASH End of Operation flag */
 346:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 347:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 348:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Clear FLASH End of Operation pending bit */
 349:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 350:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 351:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 352:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 353:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       /* Nb of pages to erased can be decreased */
 354:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       pFlash.NbPagesToErase--;
 355:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 356:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       /* Check if there are still pages to erase*/
 357:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       if (pFlash.NbPagesToErase != 0U)
 358:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       {
 359:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****         /* Increment page number */
 360:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****         pFlash.Page++;
 361:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****         FLASH_PageErase(pFlash.Page);
 362:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       }
 363:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       else
 364:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       {
 365:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****         /* No more pages to erase: stop erase pages procedure */
 366:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****         pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 367:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       }
 368:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 369:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     else
 370:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 371:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       /*Stop the ongoing procedure */
 372:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       pFlash.ProcedureOnGoing = FLASH_TYPENONE;
ARM GAS  /tmp/cctRLtgk.s 			page 8


 373:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 374:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 375:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* User callback */
 376:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     HAL_FLASH_EndOfOperationCallback(param);
 377:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 378:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 379:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 380:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 381:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Disable End of Operation and Error interrupts */
 382:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 383:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 384:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Process Unlocked */
 385:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     __HAL_UNLOCK(&pFlash);
 386:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 387:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 388:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 389:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 390:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  FLASH end of operation interrupt callback.
 391:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  ReturnValue The value saved in this parameter depends on the ongoing procedure
 392:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                  Page Erase: Page which has been erased
 393:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                  Program: Address which was selected for data program
 394:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval None
 395:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 396:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
 397:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 398:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 399:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   UNUSED(ReturnValue);
 400:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 401:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 402:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****             the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
 403:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****    */
 404:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 405:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 406:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 407:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  FLASH operation error interrupt callback.
 408:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  ReturnValue The value saved in this parameter depends on the ongoing procedure
 409:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                 Page Erase: Page number which returned an error
 410:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *                 Program: Address which was selected for data program
 411:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval None
 412:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 413:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
 414:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 415:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 416:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   UNUSED(ReturnValue);
 417:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 418:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 419:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****             the HAL_FLASH_OperationErrorCallback could be implemented in the user file
 420:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****    */
 421:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 422:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 423:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 424:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @}
 425:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 426:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 427:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group2 Peripheral Control functions
 428:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  *  @brief   Management functions
 429:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  *
ARM GAS  /tmp/cctRLtgk.s 			page 9


 430:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** @verbatim
 431:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  ===============================================================================
 432:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                       ##### Peripheral Control functions #####
 433:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  ===============================================================================
 434:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     [..]
 435:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     This subsection provides a set of functions allowing to control the FLASH
 436:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     memory operations.
 437:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 438:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** @endverbatim
 439:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @{
 440:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 441:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 442:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 443:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Unlock the FLASH control register access.
 444:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval HAL Status
 445:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 446:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Unlock(void)
 447:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 448:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 449:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 450:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 451:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 452:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Authorize the FLASH Registers access */
 453:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 454:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 455:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 456:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* verify Flash is unlock */
 457:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 458:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 459:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       status = HAL_ERROR;
 460:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 461:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 462:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 463:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   return status;
 464:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 465:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 466:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 467:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Lock the FLASH control register access.
 468:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval HAL Status
 469:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 470:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Lock(void)
 471:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 472:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 473:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 474:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Set the LOCK Bit to lock the FLASH Registers access */
 475:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
 476:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 477:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 478:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* verify Flash is locked */
 479:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 480:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 481:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     status = HAL_ERROR;
 482:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 483:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 484:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   return status;
 485:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 486:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
ARM GAS  /tmp/cctRLtgk.s 			page 10


 487:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 488:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Unlock the FLASH Option Bytes Registers access.
 489:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval HAL Status
 490:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 491:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
 492:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 493:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 494:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 495:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* @Note The lock and unlock procedure is done only using CR registers even from CPU2 */
 496:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 497:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 498:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Authorizes the Option Byte register programming */
 499:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 500:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 501:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 502:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* verify option bytes are unlocked */
 503:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0U)
 504:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 505:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       status = HAL_OK;
 506:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 507:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 508:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 509:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   return status;
 510:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 511:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 512:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 513:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Lock the FLASH Option Bytes Registers access.
 514:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval HAL Status
 515:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 516:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
 517:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 518:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 519:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 520:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
 521:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* @Note The lock and unlock procedure is done only using CR registers even from CPU2 */
 522:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 523:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 524:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* verify option bytes are lock */
 525:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0U)
 526:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 527:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     status = HAL_ERROR;
 528:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 529:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 530:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   return status;
 531:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 532:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 533:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 534:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Launch the option byte loading.
 535:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval HAL Status
 536:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 537:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
 538:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 539:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Set the bit to force the option byte reloading */
 540:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* The OB launch is done from the same register either from CPU1 or CPU2 */
 541:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 542:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 543:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* We should not reach here : Option byte launch generates Option byte reset
ARM GAS  /tmp/cctRLtgk.s 			page 11


 544:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****      so return error */
 545:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   return HAL_ERROR;
 546:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 547:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 548:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 549:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @}
 550:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 551:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 552:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group3 Peripheral State and Errors functions
 553:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  *  @brief   Peripheral Errors functions
 554:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  *
 555:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** @verbatim
 556:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  ===============================================================================
 557:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****                 ##### Peripheral Errors functions #####
 558:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****  ===============================================================================
 559:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     [..]
 560:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     This subsection permits to get in run-time Errors of the FLASH peripheral.
 561:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 562:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** @endverbatim
 563:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @{
 564:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 565:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 566:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 567:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Get the specific FLASH error flag.
 568:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval FLASH_ErrorCode The returned value can be
 569:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_NONE No error set
 570:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_OP FLASH Operation error
 571:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_PROG FLASH Programming error
 572:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_WRP FLASH Write protection error
 573:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_PGA FLASH Programming alignment error
 574:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_SIZ FLASH Size error
 575:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_PGS FLASH Programming sequence error
 576:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_MIS FLASH Fast programming data miss error
 577:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_FAST FLASH Fast programming error
 578:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_RD FLASH Read Protection error (PCROP)
 579:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_OPTV FLASH Option validity error
 580:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 581:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** uint32_t HAL_FLASH_GetError(void)
 582:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 583:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   return pFlash.ErrorCode;
 584:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 585:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 586:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 587:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @}
 588:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 589:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 590:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 591:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @}
 592:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 593:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 594:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /* Private functions ---------------------------------------------------------*/
 595:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 596:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /** @addtogroup FLASH_Private_Functions
 597:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @{
 598:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 599:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 600:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
ARM GAS  /tmp/cctRLtgk.s 			page 12


 601:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Wait for a FLASH operation to complete.
 602:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  Timeout Maximum flash operation timeout
 603:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval HAL_StatusTypeDef HAL Status
 604:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 605:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
 606:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
 607:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint32_t error;
 608:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint32_t tickstart = HAL_GetTick();
 609:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 610:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
 611:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****      Even if the FLASH operation fails, the BUSY flag will be reset and an error
 612:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****      flag will be set */
 613:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 614:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 615:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     if ((HAL_GetTick() - tickstart) >= Timeout)
 616:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 617:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       return HAL_TIMEOUT;
 618:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 619:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 620:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 621:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Check FLASH operation error flags */
 622:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   error = FLASH->SR;
 623:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 624:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Check FLASH End of Operation flag */
 625:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if ((error & FLASH_FLAG_EOP) != 0U)
 626:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 627:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /* Clear FLASH End of Operation pending bit */
 628:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 629:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 630:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 631:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Now update error variable to only error value */
 632:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   error &= FLASH_FLAG_SR_ERRORS;
 633:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 634:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* clear error flags */
 635:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   __HAL_FLASH_CLEAR_FLAG(error);
 636:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 637:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   if (error != 0U)
 638:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 639:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     /*Save the error code*/
 640:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     pFlash.ErrorCode = error;
 641:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 642:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     return HAL_ERROR;
 643:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 644:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 645:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Wait for control register to be written */
 646:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 647:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 648:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     if ((HAL_GetTick() - tickstart) >= Timeout)
 649:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 650:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       return HAL_TIMEOUT;
 651:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 652:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 653:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 654:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   return HAL_OK;
 655:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 656:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 657:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
ARM GAS  /tmp/cctRLtgk.s 			page 13


 658:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Program double-word (64-bit) at a specified address.
 659:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  Address Specifies the address to be programmed.
 660:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  Data Specifies the data to be programmed.
 661:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval None
 662:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 663:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
 664:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
  29              		.loc 1 664 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              		.loc 1 664 1 is_stmt 0 view .LVU1
  35 0000 10B4     		push	{r4}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 4
  38              		.cfi_offset 4, -4
 665:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Set PG bit */
 666:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_PG);
  39              		.loc 1 666 3 is_stmt 1 view .LVU2
  40 0002 064C     		ldr	r4, .L3
  41 0004 6169     		ldr	r1, [r4, #20]
  42 0006 41F00101 		orr	r1, r1, #1
  43 000a 6161     		str	r1, [r4, #20]
 667:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 668:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Program first word */
 669:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *(uint32_t *)Address = (uint32_t)Data;
  44              		.loc 1 669 3 view .LVU3
  45              		.loc 1 669 24 is_stmt 0 view .LVU4
  46 000c 0260     		str	r2, [r0]
 670:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 671:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Barrier to ensure programming is performed in 2 steps, in right order
 672:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     (independently of compiler optimization behavior) */
 673:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   __ISB();
  47              		.loc 1 673 3 is_stmt 1 view .LVU5
  48              	.LBB10:
  49              	.LBI10:
  50              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
ARM GAS  /tmp/cctRLtgk.s 			page 14


  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
ARM GAS  /tmp/cctRLtgk.s 			page 15


  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
ARM GAS  /tmp/cctRLtgk.s 			page 16


 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cctRLtgk.s 			page 17


 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 214:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 220:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cctRLtgk.s 			page 18


 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 260:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 262:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 302:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
ARM GAS  /tmp/cctRLtgk.s 			page 19


 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 321:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 346:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 360:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cctRLtgk.s 			page 20


 362:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 364:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 393:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 402:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cctRLtgk.s 			page 21


 419:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 423:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 437:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 474:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
ARM GAS  /tmp/cctRLtgk.s 			page 22


 476:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 512:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 519:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 523:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 530:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
ARM GAS  /tmp/cctRLtgk.s 			page 23


 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 545:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 546:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 553:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 576:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 578:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 587:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 588:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 589:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cctRLtgk.s 			page 24


 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 597:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 617:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 618:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 629:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 640:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 642:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cctRLtgk.s 			page 25


 647:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 667:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 686:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cctRLtgk.s 			page 26


 704:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 706:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 753:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 754:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 758:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
ARM GAS  /tmp/cctRLtgk.s 			page 27


 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 774:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 779:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 782:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 784:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 788:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 802:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 815:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
ARM GAS  /tmp/cctRLtgk.s 			page 28


 818:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 819:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 821:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 833:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 843:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 847:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 848:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 854:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cctRLtgk.s 			page 29


 875:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 884:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 885:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 886:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 903:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 905:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 913:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 917:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
ARM GAS  /tmp/cctRLtgk.s 			page 30


 932:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 933:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
  51              		.loc 2 933 27 view .LVU6
  52              	.LBB11:
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 935:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
  53              		.loc 2 935 3 view .LVU7
  54              		.syntax unified
  55              	@ 935 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  56 000e BFF36F8F 		isb 0xF
  57              	@ 0 "" 2
  58              		.thumb
  59              		.syntax unified
  60              	.LBE11:
  61              	.LBE10:
 674:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 675:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Program second word */
 676:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
  62              		.loc 1 676 3 view .LVU8
  63              		.loc 1 676 31 is_stmt 0 view .LVU9
  64 0012 4360     		str	r3, [r0, #4]
 677:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
  65              		.loc 1 677 1 view .LVU10
  66 0014 5DF8044B 		ldr	r4, [sp], #4
  67              	.LCFI1:
  68              		.cfi_restore 4
  69              		.cfi_def_cfa_offset 0
  70 0018 7047     		bx	lr
  71              	.L4:
  72 001a 00BF     		.align	2
  73              	.L3:
  74 001c 00400058 		.word	1476411392
  75              		.cfi_endproc
  76              	.LFE955:
  78              		.section	.RamFunc,"ax",%progbits
  79              		.align	1
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  83              		.fpu fpv4-sp-d16
  85              	FLASH_Program_Fast:
  86              	.LVL1:
  87              	.LFB956:
 678:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 679:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** /**
 680:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @brief  Fast program a 32 row double-word (64-bit) at a specified address.
 681:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  Address Specifies the address to be programmed.
 682:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @param  DataAddress Specifies the address where the data are stored.
 683:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   * @retval None
 684:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   */
 685:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
 686:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** {
  88              		.loc 1 686 1 is_stmt 1 view -0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92              		@ link register save eliminated.
ARM GAS  /tmp/cctRLtgk.s 			page 31


  93              		.loc 1 686 1 is_stmt 0 view .LVU12
  94 0000 10B4     		push	{r4}
  95              	.LCFI2:
  96              		.cfi_def_cfa_offset 4
  97              		.cfi_offset 4, -4
 687:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
  98              		.loc 1 687 3 is_stmt 1 view .LVU13
  99              	.LVL2:
 688:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 100              		.loc 1 688 3 view .LVU14
 689:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 101              		.loc 1 689 3 view .LVU15
 690:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint32_t primask_bit;
 102              		.loc 1 690 3 view .LVU16
 691:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 692:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Set FSTPG bit */
 693:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 103              		.loc 1 693 3 view .LVU17
 104 0002 0D4A     		ldr	r2, .L9
 105 0004 5369     		ldr	r3, [r2, #20]
 106 0006 43F48023 		orr	r3, r3, #262144
 107 000a 5361     		str	r3, [r2, #20]
 694:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 695:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Enter critical section: row programming should not be longer than 7 ms */
 696:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   primask_bit = __get_PRIMASK();
 108              		.loc 1 696 3 view .LVU18
 109              	.LBB12:
 110              	.LBI12:
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 111              		.loc 2 449 31 view .LVU19
 112              	.LBB13:
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113              		.loc 2 451 3 view .LVU20
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 114              		.loc 2 453 3 view .LVU21
 115              		.syntax unified
 116              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 117 000c EFF31084 		MRS r4, primask
 118              	@ 0 "" 2
 119              	.LVL3:
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 120              		.loc 2 454 3 view .LVU22
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 121              		.loc 2 454 3 is_stmt 0 view .LVU23
 122              		.thumb
 123              		.syntax unified
 124              	.LBE13:
 125              	.LBE12:
 697:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   __disable_irq();
 126              		.loc 1 697 3 is_stmt 1 view .LVU24
 127              	.LBB14:
 128              	.LBI14:
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 129              		.loc 2 207 27 view .LVU25
 130              	.LBB15:
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 131              		.loc 2 209 3 view .LVU26
ARM GAS  /tmp/cctRLtgk.s 			page 32


 132              		.syntax unified
 133              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 134 0010 72B6     		cpsid i
 135              	@ 0 "" 2
 136              		.thumb
 137              		.syntax unified
 138              	.LBE15:
 139              	.LBE14:
 687:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 140              		.loc 1 687 11 is_stmt 0 view .LVU27
 141 0012 8023     		movs	r3, #128
 142              	.LVL4:
 143              	.L6:
 698:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 699:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Program the double word of the row */
 700:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   do
 144              		.loc 1 700 3 is_stmt 1 discriminator 1 view .LVU28
 701:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 702:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     *dest_addr = *src_addr;
 145              		.loc 1 702 5 discriminator 1 view .LVU29
 146              		.loc 1 702 18 is_stmt 0 discriminator 1 view .LVU30
 147 0014 51F8042B 		ldr	r2, [r1], #4
 148              	.LVL5:
 149              		.loc 1 702 16 discriminator 1 view .LVU31
 150 0018 40F8042B 		str	r2, [r0], #4
 151              	.LVL6:
 703:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     dest_addr++;
 152              		.loc 1 703 5 is_stmt 1 discriminator 1 view .LVU32
 704:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     src_addr++;
 153              		.loc 1 704 5 discriminator 1 view .LVU33
 705:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     row_index--;
 154              		.loc 1 705 5 discriminator 1 view .LVU34
 155              		.loc 1 705 14 is_stmt 0 discriminator 1 view .LVU35
 156 001c 013B     		subs	r3, r3, #1
 157              	.LVL7:
 706:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 707:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   while (row_index != 0U);
 158              		.loc 1 707 3 discriminator 1 view .LVU36
 159 001e 13F0FF03 		ands	r3, r3, #255
 160              	.LVL8:
 161              		.loc 1 707 3 discriminator 1 view .LVU37
 162 0022 F7D1     		bne	.L6
 163              	.L7:
 708:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 709:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* wait for BSY in order to be sure that flash operation is ended before
 710:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****      allowing prefetch in flash. Timeout does not return status, as it will
 711:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****      be anyway done later */
 712:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 713:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 714:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 164              		.loc 1 714 3 is_stmt 1 discriminator 1 view .LVU38
 712:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 165              		.loc 1 712 10 is_stmt 0 discriminator 1 view .LVU39
 166 0024 044B     		ldr	r3, .L9
 167 0026 1B69     		ldr	r3, [r3, #16]
 712:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 168              		.loc 1 712 9 discriminator 1 view .LVU40
ARM GAS  /tmp/cctRLtgk.s 			page 33


 169 0028 13F4803F 		tst	r3, #65536
 170 002c FAD1     		bne	.L7
 715:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 716:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Exit critical section: restore previous priority mask */
 717:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   __set_PRIMASK(primask_bit);
 171              		.loc 1 717 3 is_stmt 1 view .LVU41
 172              	.LVL9:
 173              	.LBB16:
 174              	.LBI16:
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175              		.loc 2 479 27 view .LVU42
 176              	.LBB17:
 481:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 177              		.loc 2 481 3 view .LVU43
 178              		.syntax unified
 179              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 180 002e 84F31088 		MSR primask, r4
 181              	@ 0 "" 2
 182              	.LVL10:
 481:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 183              		.loc 2 481 3 is_stmt 0 view .LVU44
 184              		.thumb
 185              		.syntax unified
 186              	.LBE17:
 187              	.LBE16:
 718:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 188              		.loc 1 718 1 view .LVU45
 189 0032 5DF8044B 		ldr	r4, [sp], #4
 190              	.LCFI3:
 191              		.cfi_restore 4
 192              		.cfi_def_cfa_offset 0
 193              	.LVL11:
 194              		.loc 1 718 1 view .LVU46
 195 0036 7047     		bx	lr
 196              	.L10:
 197              		.align	2
 198              	.L9:
 199 0038 00400058 		.word	1476411392
 200              		.cfi_endproc
 201              	.LFE956:
 203              		.section	.text.HAL_FLASH_EndOfOperationCallback,"ax",%progbits
 204              		.align	1
 205              		.weak	HAL_FLASH_EndOfOperationCallback
 206              		.syntax unified
 207              		.thumb
 208              		.thumb_func
 209              		.fpu fpv4-sp-d16
 211              	HAL_FLASH_EndOfOperationCallback:
 212              	.LVL12:
 213              	.LFB946:
 397:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 214              		.loc 1 397 1 is_stmt 1 view -0
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 0
 217              		@ frame_needed = 0, uses_anonymous_args = 0
 218              		@ link register save eliminated.
 399:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
ARM GAS  /tmp/cctRLtgk.s 			page 34


 219              		.loc 1 399 3 view .LVU48
 404:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 220              		.loc 1 404 1 is_stmt 0 view .LVU49
 221 0000 7047     		bx	lr
 222              		.cfi_endproc
 223              	.LFE946:
 225              		.section	.text.HAL_FLASH_OperationErrorCallback,"ax",%progbits
 226              		.align	1
 227              		.weak	HAL_FLASH_OperationErrorCallback
 228              		.syntax unified
 229              		.thumb
 230              		.thumb_func
 231              		.fpu fpv4-sp-d16
 233              	HAL_FLASH_OperationErrorCallback:
 234              	.LVL13:
 235              	.LFB947:
 414:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 236              		.loc 1 414 1 is_stmt 1 view -0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240              		@ link register save eliminated.
 416:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 241              		.loc 1 416 3 view .LVU51
 421:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 242              		.loc 1 421 1 is_stmt 0 view .LVU52
 243 0000 7047     		bx	lr
 244              		.cfi_endproc
 245              	.LFE947:
 247              		.section	.text.HAL_FLASH_IRQHandler,"ax",%progbits
 248              		.align	1
 249              		.global	HAL_FLASH_IRQHandler
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 253              		.fpu fpv4-sp-d16
 255              	HAL_FLASH_IRQHandler:
 256              	.LFB945:
 301:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint32_t param = 0xFFFFFFFFU;
 257              		.loc 1 301 1 is_stmt 1 view -0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261 0000 10B5     		push	{r4, lr}
 262              	.LCFI4:
 263              		.cfi_def_cfa_offset 8
 264              		.cfi_offset 4, -8
 265              		.cfi_offset 14, -4
 302:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint32_t error;
 266              		.loc 1 302 3 view .LVU54
 267              	.LVL14:
 303:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 268              		.loc 1 303 3 view .LVU55
 306:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 269              		.loc 1 306 3 view .LVU56
 306:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 270              		.loc 1 306 17 is_stmt 0 view .LVU57
ARM GAS  /tmp/cctRLtgk.s 			page 35


 271 0002 2B4A     		ldr	r2, .L27
 272 0004 1369     		ldr	r3, [r2, #16]
 306:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 273              		.loc 1 306 9 view .LVU58
 274 0006 23F47053 		bic	r3, r3, #15360
 275 000a 23F00503 		bic	r3, r3, #5
 276 000e 1B04     		lsls	r3, r3, #16
 277 0010 1B0C     		lsrs	r3, r3, #16
 278              	.LVL15:
 309:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 279              		.loc 1 309 3 is_stmt 1 view .LVU59
 280 0012 5169     		ldr	r1, [r2, #20]
 281 0014 2748     		ldr	r0, .L27+4
 282 0016 8068     		ldr	r0, [r0, #8]
 283 0018 21EA0001 		bic	r1, r1, r0
 284 001c 5161     		str	r1, [r2, #20]
 313:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 285              		.loc 1 313 3 view .LVU60
 313:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 286              		.loc 1 313 32 is_stmt 0 view .LVU61
 287 001e 264A     		ldr	r2, .L27+8
 288 0020 0240     		ands	r2, r2, r0
 313:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 289              		.loc 1 313 6 view .LVU62
 290 0022 02B3     		cbz	r2, .L14
 316:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 291              		.loc 1 316 5 is_stmt 1 view .LVU63
 316:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 292              		.loc 1 316 11 is_stmt 0 view .LVU64
 293 0024 234A     		ldr	r2, .L27+4
 294 0026 D468     		ldr	r4, [r2, #12]
 295              	.LVL16:
 296              	.L15:
 327:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 297              		.loc 1 327 3 is_stmt 1 view .LVU65
 330:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 298              		.loc 1 330 3 view .LVU66
 330:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 299              		.loc 1 330 6 is_stmt 0 view .LVU67
 300 0028 33BB     		cbnz	r3, .L24
 301              	.LVL17:
 302              	.L16:
 346:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 303              		.loc 1 346 3 is_stmt 1 view .LVU68
 346:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 304              		.loc 1 346 7 is_stmt 0 view .LVU69
 305 002a 214B     		ldr	r3, .L27
 306 002c 1B69     		ldr	r3, [r3, #16]
 346:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 307              		.loc 1 346 6 view .LVU70
 308 002e 13F0010F 		tst	r3, #1
 309 0032 0CD0     		beq	.L17
 349:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 310              		.loc 1 349 5 is_stmt 1 discriminator 4 view .LVU71
 349:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 311              		.loc 1 349 5 discriminator 4 view .LVU72
 349:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
ARM GAS  /tmp/cctRLtgk.s 			page 36


 312              		.loc 1 349 5 discriminator 4 view .LVU73
 349:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 313              		.loc 1 349 5 discriminator 4 view .LVU74
 314 0034 1E4B     		ldr	r3, .L27
 315 0036 0122     		movs	r2, #1
 316 0038 1A61     		str	r2, [r3, #16]
 351:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 317              		.loc 1 351 5 discriminator 4 view .LVU75
 351:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 318              		.loc 1 351 15 is_stmt 0 discriminator 4 view .LVU76
 319 003a 1E4B     		ldr	r3, .L27+4
 320 003c 9B68     		ldr	r3, [r3, #8]
 351:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 321              		.loc 1 351 8 discriminator 4 view .LVU77
 322 003e 022B     		cmp	r3, #2
 323 0040 26D0     		beq	.L25
 372:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 324              		.loc 1 372 7 is_stmt 1 view .LVU78
 372:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 325              		.loc 1 372 31 is_stmt 0 view .LVU79
 326 0042 1C4B     		ldr	r3, .L27+4
 327 0044 0022     		movs	r2, #0
 328 0046 9A60     		str	r2, [r3, #8]
 329              	.L20:
 376:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 330              		.loc 1 376 5 is_stmt 1 view .LVU80
 331 0048 2046     		mov	r0, r4
 332 004a FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 333              	.LVL18:
 334              	.L17:
 379:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 335              		.loc 1 379 3 view .LVU81
 379:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 336              		.loc 1 379 13 is_stmt 0 view .LVU82
 337 004e 194B     		ldr	r3, .L27+4
 338 0050 9B68     		ldr	r3, [r3, #8]
 379:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 339              		.loc 1 379 6 view .LVU83
 340 0052 3BB9     		cbnz	r3, .L13
 382:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 341              		.loc 1 382 5 is_stmt 1 discriminator 4 view .LVU84
 382:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 342              		.loc 1 382 5 discriminator 4 view .LVU85
 382:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 343              		.loc 1 382 5 discriminator 4 view .LVU86
 382:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 344              		.loc 1 382 5 discriminator 4 view .LVU87
 345 0054 164A     		ldr	r2, .L27
 346 0056 5369     		ldr	r3, [r2, #20]
 347 0058 23F04073 		bic	r3, r3, #50331648
 348 005c 5361     		str	r3, [r2, #20]
 385:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 349              		.loc 1 385 5 discriminator 4 view .LVU88
 385:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 350              		.loc 1 385 5 discriminator 4 view .LVU89
 351 005e 154B     		ldr	r3, .L27+4
 352 0060 0022     		movs	r2, #0
ARM GAS  /tmp/cctRLtgk.s 			page 37


 353 0062 1A70     		strb	r2, [r3]
 354              	.L13:
 387:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 355              		.loc 1 387 1 is_stmt 0 view .LVU90
 356 0064 10BD     		pop	{r4, pc}
 357              	.LVL19:
 358              	.L14:
 318:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 359              		.loc 1 318 8 is_stmt 1 view .LVU91
 318:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 360              		.loc 1 318 11 is_stmt 0 view .LVU92
 361 0066 10F0020F 		tst	r0, #2
 362 006a 02D0     		beq	.L22
 321:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 363              		.loc 1 321 5 is_stmt 1 view .LVU93
 321:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 364              		.loc 1 321 11 is_stmt 0 view .LVU94
 365 006c 114A     		ldr	r2, .L27+4
 366 006e 1469     		ldr	r4, [r2, #16]
 367              	.LVL20:
 321:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 368              		.loc 1 321 11 view .LVU95
 369 0070 DAE7     		b	.L15
 370              	.LVL21:
 371              	.L22:
 302:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint32_t error;
 372              		.loc 1 302 12 view .LVU96
 373 0072 4FF0FF34 		mov	r4, #-1
 374 0076 D7E7     		b	.L15
 375              	.LVL22:
 376              	.L24:
 333:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 377              		.loc 1 333 5 is_stmt 1 view .LVU97
 333:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 378              		.loc 1 333 22 is_stmt 0 view .LVU98
 379 0078 0E4A     		ldr	r2, .L27+4
 380 007a 5168     		ldr	r1, [r2, #4]
 381 007c 1943     		orrs	r1, r1, r3
 382 007e 5160     		str	r1, [r2, #4]
 336:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 383              		.loc 1 336 5 is_stmt 1 view .LVU99
 336:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 384              		.loc 1 336 5 view .LVU100
 336:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 385              		.loc 1 336 5 view .LVU101
 336:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 386              		.loc 1 336 5 view .LVU102
 387 0080 0B49     		ldr	r1, .L27
 388 0082 0B61     		str	r3, [r1, #16]
 339:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 389              		.loc 1 339 5 view .LVU103
 339:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 390              		.loc 1 339 29 is_stmt 0 view .LVU104
 391 0084 0023     		movs	r3, #0
 392              	.LVL23:
 339:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 393              		.loc 1 339 29 view .LVU105
ARM GAS  /tmp/cctRLtgk.s 			page 38


 394 0086 9360     		str	r3, [r2, #8]
 342:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 395              		.loc 1 342 5 is_stmt 1 view .LVU106
 396 0088 2046     		mov	r0, r4
 397 008a FFF7FEFF 		bl	HAL_FLASH_OperationErrorCallback
 398              	.LVL24:
 342:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 399              		.loc 1 342 5 is_stmt 0 view .LVU107
 400 008e CCE7     		b	.L16
 401              	.L25:
 354:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 402              		.loc 1 354 7 is_stmt 1 view .LVU108
 354:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 403              		.loc 1 354 13 is_stmt 0 view .LVU109
 404 0090 084A     		ldr	r2, .L27+4
 405 0092 5369     		ldr	r3, [r2, #20]
 354:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 406              		.loc 1 354 28 view .LVU110
 407 0094 013B     		subs	r3, r3, #1
 408 0096 5361     		str	r3, [r2, #20]
 357:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       {
 409              		.loc 1 357 7 is_stmt 1 view .LVU111
 357:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       {
 410              		.loc 1 357 10 is_stmt 0 view .LVU112
 411 0098 1BB9     		cbnz	r3, .L26
 366:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       }
 412              		.loc 1 366 9 is_stmt 1 view .LVU113
 366:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       }
 413              		.loc 1 366 33 is_stmt 0 view .LVU114
 414 009a 064B     		ldr	r3, .L27+4
 415 009c 0022     		movs	r2, #0
 416 009e 9A60     		str	r2, [r3, #8]
 417 00a0 D2E7     		b	.L20
 418              	.L26:
 360:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****         FLASH_PageErase(pFlash.Page);
 419              		.loc 1 360 9 is_stmt 1 view .LVU115
 360:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****         FLASH_PageErase(pFlash.Page);
 420              		.loc 1 360 15 is_stmt 0 view .LVU116
 421 00a2 1069     		ldr	r0, [r2, #16]
 360:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****         FLASH_PageErase(pFlash.Page);
 422              		.loc 1 360 20 view .LVU117
 423 00a4 0130     		adds	r0, r0, #1
 424 00a6 1061     		str	r0, [r2, #16]
 361:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****       }
 425              		.loc 1 361 9 is_stmt 1 view .LVU118
 426 00a8 FFF7FEFF 		bl	FLASH_PageErase
 427              	.LVL25:
 428 00ac CCE7     		b	.L20
 429              	.L28:
 430 00ae 00BF     		.align	2
 431              	.L27:
 432 00b0 00400058 		.word	1476411392
 433 00b4 00000000 		.word	.LANCHOR0
 434 00b8 01000400 		.word	262145
 435              		.cfi_endproc
 436              	.LFE945:
 438              		.section	.text.HAL_FLASH_Unlock,"ax",%progbits
ARM GAS  /tmp/cctRLtgk.s 			page 39


 439              		.align	1
 440              		.global	HAL_FLASH_Unlock
 441              		.syntax unified
 442              		.thumb
 443              		.thumb_func
 444              		.fpu fpv4-sp-d16
 446              	HAL_FLASH_Unlock:
 447              	.LFB948:
 447:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 448              		.loc 1 447 1 view -0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 0
 451              		@ frame_needed = 0, uses_anonymous_args = 0
 452              		@ link register save eliminated.
 448:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 453              		.loc 1 448 3 view .LVU120
 454              	.LVL26:
 450:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 455              		.loc 1 450 3 view .LVU121
 450:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 456              		.loc 1 450 7 is_stmt 0 view .LVU122
 457 0000 094B     		ldr	r3, .L34
 458 0002 5B69     		ldr	r3, [r3, #20]
 450:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 459              		.loc 1 450 6 view .LVU123
 460 0004 002B     		cmp	r3, #0
 461 0006 01DB     		blt	.L33
 448:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 462              		.loc 1 448 21 view .LVU124
 463 0008 0020     		movs	r0, #0
 464 000a 7047     		bx	lr
 465              	.L33:
 453:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 466              		.loc 1 453 5 is_stmt 1 view .LVU125
 467 000c 064B     		ldr	r3, .L34
 468 000e 074A     		ldr	r2, .L34+4
 469 0010 9A60     		str	r2, [r3, #8]
 454:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 470              		.loc 1 454 5 view .LVU126
 471 0012 02F18832 		add	r2, r2, #-2004318072
 472 0016 9A60     		str	r2, [r3, #8]
 457:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 473              		.loc 1 457 5 view .LVU127
 457:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 474              		.loc 1 457 9 is_stmt 0 view .LVU128
 475 0018 5B69     		ldr	r3, [r3, #20]
 457:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 476              		.loc 1 457 8 view .LVU129
 477 001a 002B     		cmp	r3, #0
 478 001c 01DB     		blt	.L32
 448:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 479              		.loc 1 448 21 view .LVU130
 480 001e 0020     		movs	r0, #0
 481 0020 7047     		bx	lr
 482              	.L32:
 459:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 483              		.loc 1 459 14 view .LVU131
ARM GAS  /tmp/cctRLtgk.s 			page 40


 484 0022 0120     		movs	r0, #1
 485              	.LVL27:
 463:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 486              		.loc 1 463 3 is_stmt 1 view .LVU132
 464:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 487              		.loc 1 464 1 is_stmt 0 view .LVU133
 488 0024 7047     		bx	lr
 489              	.L35:
 490 0026 00BF     		.align	2
 491              	.L34:
 492 0028 00400058 		.word	1476411392
 493 002c 23016745 		.word	1164378403
 494              		.cfi_endproc
 495              	.LFE948:
 497              		.section	.text.HAL_FLASH_Lock,"ax",%progbits
 498              		.align	1
 499              		.global	HAL_FLASH_Lock
 500              		.syntax unified
 501              		.thumb
 502              		.thumb_func
 503              		.fpu fpv4-sp-d16
 505              	HAL_FLASH_Lock:
 506              	.LFB949:
 471:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 507              		.loc 1 471 1 is_stmt 1 view -0
 508              		.cfi_startproc
 509              		@ args = 0, pretend = 0, frame = 0
 510              		@ frame_needed = 0, uses_anonymous_args = 0
 511              		@ link register save eliminated.
 472:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 512              		.loc 1 472 3 view .LVU135
 513              	.LVL28:
 476:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 514              		.loc 1 476 3 view .LVU136
 515 0000 054B     		ldr	r3, .L40
 516 0002 5A69     		ldr	r2, [r3, #20]
 517 0004 42F00042 		orr	r2, r2, #-2147483648
 518 0008 5A61     		str	r2, [r3, #20]
 479:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 519              		.loc 1 479 3 view .LVU137
 479:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 520              		.loc 1 479 7 is_stmt 0 view .LVU138
 521 000a 5B69     		ldr	r3, [r3, #20]
 479:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 522              		.loc 1 479 6 view .LVU139
 523 000c 002B     		cmp	r3, #0
 524 000e 01DB     		blt	.L39
 481:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 525              		.loc 1 481 12 view .LVU140
 526 0010 0120     		movs	r0, #1
 527              	.LVL29:
 484:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 528              		.loc 1 484 3 is_stmt 1 view .LVU141
 485:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 529              		.loc 1 485 1 is_stmt 0 view .LVU142
 530 0012 7047     		bx	lr
 531              	.LVL30:
ARM GAS  /tmp/cctRLtgk.s 			page 41


 532              	.L39:
 472:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 533              		.loc 1 472 21 view .LVU143
 534 0014 0020     		movs	r0, #0
 535 0016 7047     		bx	lr
 536              	.L41:
 537              		.align	2
 538              	.L40:
 539 0018 00400058 		.word	1476411392
 540              		.cfi_endproc
 541              	.LFE949:
 543              		.section	.text.HAL_FLASH_OB_Unlock,"ax",%progbits
 544              		.align	1
 545              		.global	HAL_FLASH_OB_Unlock
 546              		.syntax unified
 547              		.thumb
 548              		.thumb_func
 549              		.fpu fpv4-sp-d16
 551              	HAL_FLASH_OB_Unlock:
 552              	.LFB950:
 492:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 553              		.loc 1 492 1 is_stmt 1 view -0
 554              		.cfi_startproc
 555              		@ args = 0, pretend = 0, frame = 0
 556              		@ frame_needed = 0, uses_anonymous_args = 0
 557              		@ link register save eliminated.
 493:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 558              		.loc 1 493 3 view .LVU145
 559              	.LVL31:
 496:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 560              		.loc 1 496 3 view .LVU146
 496:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 561              		.loc 1 496 7 is_stmt 0 view .LVU147
 562 0000 0A4B     		ldr	r3, .L46
 563 0002 5B69     		ldr	r3, [r3, #20]
 496:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 564              		.loc 1 496 6 view .LVU148
 565 0004 13F0804F 		tst	r3, #1073741824
 566 0008 0BD0     		beq	.L44
 499:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 567              		.loc 1 499 5 is_stmt 1 view .LVU149
 568 000a 084B     		ldr	r3, .L46
 569 000c 084A     		ldr	r2, .L46+4
 570 000e DA60     		str	r2, [r3, #12]
 500:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 571              		.loc 1 500 5 view .LVU150
 572 0010 02F14432 		add	r2, r2, #1145324612
 573 0014 DA60     		str	r2, [r3, #12]
 503:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 574              		.loc 1 503 5 view .LVU151
 503:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 575              		.loc 1 503 9 is_stmt 0 view .LVU152
 576 0016 5B69     		ldr	r3, [r3, #20]
 503:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 577              		.loc 1 503 8 view .LVU153
 578 0018 13F0804F 		tst	r3, #1073741824
 579 001c 03D0     		beq	.L45
ARM GAS  /tmp/cctRLtgk.s 			page 42


 493:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 580              		.loc 1 493 21 view .LVU154
 581 001e 0120     		movs	r0, #1
 582 0020 7047     		bx	lr
 583              	.L44:
 584 0022 0120     		movs	r0, #1
 585 0024 7047     		bx	lr
 586              	.L45:
 505:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 587              		.loc 1 505 14 view .LVU155
 588 0026 0020     		movs	r0, #0
 589              	.LVL32:
 509:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 590              		.loc 1 509 3 is_stmt 1 view .LVU156
 510:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 591              		.loc 1 510 1 is_stmt 0 view .LVU157
 592 0028 7047     		bx	lr
 593              	.L47:
 594 002a 00BF     		.align	2
 595              	.L46:
 596 002c 00400058 		.word	1476411392
 597 0030 3B2A1908 		.word	135866939
 598              		.cfi_endproc
 599              	.LFE950:
 601              		.section	.text.HAL_FLASH_OB_Lock,"ax",%progbits
 602              		.align	1
 603              		.global	HAL_FLASH_OB_Lock
 604              		.syntax unified
 605              		.thumb
 606              		.thumb_func
 607              		.fpu fpv4-sp-d16
 609              	HAL_FLASH_OB_Lock:
 610              	.LFB951:
 517:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 611              		.loc 1 517 1 is_stmt 1 view -0
 612              		.cfi_startproc
 613              		@ args = 0, pretend = 0, frame = 0
 614              		@ frame_needed = 0, uses_anonymous_args = 0
 615              		@ link register save eliminated.
 518:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 616              		.loc 1 518 3 view .LVU159
 617              	.LVL33:
 522:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 618              		.loc 1 522 3 view .LVU160
 619 0000 064B     		ldr	r3, .L51
 620 0002 5A69     		ldr	r2, [r3, #20]
 621 0004 42F08042 		orr	r2, r2, #1073741824
 622 0008 5A61     		str	r2, [r3, #20]
 525:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 623              		.loc 1 525 3 view .LVU161
 525:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 624              		.loc 1 525 7 is_stmt 0 view .LVU162
 625 000a 5B69     		ldr	r3, [r3, #20]
 525:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 626              		.loc 1 525 6 view .LVU163
 627 000c 13F0804F 		tst	r3, #1073741824
 628 0010 01D0     		beq	.L50
ARM GAS  /tmp/cctRLtgk.s 			page 43


 518:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 629              		.loc 1 518 21 view .LVU164
 630 0012 0020     		movs	r0, #0
 631 0014 7047     		bx	lr
 632              	.L50:
 527:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 633              		.loc 1 527 12 view .LVU165
 634 0016 0120     		movs	r0, #1
 635              	.LVL34:
 530:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 636              		.loc 1 530 3 is_stmt 1 view .LVU166
 531:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 637              		.loc 1 531 1 is_stmt 0 view .LVU167
 638 0018 7047     		bx	lr
 639              	.L52:
 640 001a 00BF     		.align	2
 641              	.L51:
 642 001c 00400058 		.word	1476411392
 643              		.cfi_endproc
 644              	.LFE951:
 646              		.section	.text.HAL_FLASH_OB_Launch,"ax",%progbits
 647              		.align	1
 648              		.global	HAL_FLASH_OB_Launch
 649              		.syntax unified
 650              		.thumb
 651              		.thumb_func
 652              		.fpu fpv4-sp-d16
 654              	HAL_FLASH_OB_Launch:
 655              	.LFB952:
 538:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   /* Set the bit to force the option byte reloading */
 656              		.loc 1 538 1 is_stmt 1 view -0
 657              		.cfi_startproc
 658              		@ args = 0, pretend = 0, frame = 0
 659              		@ frame_needed = 0, uses_anonymous_args = 0
 660              		@ link register save eliminated.
 541:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 661              		.loc 1 541 3 view .LVU169
 662 0000 034A     		ldr	r2, .L54
 663 0002 5369     		ldr	r3, [r2, #20]
 664 0004 43F00063 		orr	r3, r3, #134217728
 665 0008 5361     		str	r3, [r2, #20]
 545:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 666              		.loc 1 545 3 view .LVU170
 546:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 667              		.loc 1 546 1 is_stmt 0 view .LVU171
 668 000a 0120     		movs	r0, #1
 669 000c 7047     		bx	lr
 670              	.L55:
 671 000e 00BF     		.align	2
 672              	.L54:
 673 0010 00400058 		.word	1476411392
 674              		.cfi_endproc
 675              	.LFE952:
 677              		.section	.text.HAL_FLASH_GetError,"ax",%progbits
 678              		.align	1
 679              		.global	HAL_FLASH_GetError
 680              		.syntax unified
ARM GAS  /tmp/cctRLtgk.s 			page 44


 681              		.thumb
 682              		.thumb_func
 683              		.fpu fpv4-sp-d16
 685              	HAL_FLASH_GetError:
 686              	.LFB953:
 582:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   return pFlash.ErrorCode;
 687              		.loc 1 582 1 is_stmt 1 view -0
 688              		.cfi_startproc
 689              		@ args = 0, pretend = 0, frame = 0
 690              		@ frame_needed = 0, uses_anonymous_args = 0
 691              		@ link register save eliminated.
 583:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 692              		.loc 1 583 3 view .LVU173
 584:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 693              		.loc 1 584 1 is_stmt 0 view .LVU174
 694 0000 014B     		ldr	r3, .L57
 695 0002 5868     		ldr	r0, [r3, #4]
 696 0004 7047     		bx	lr
 697              	.L58:
 698 0006 00BF     		.align	2
 699              	.L57:
 700 0008 00000000 		.word	.LANCHOR0
 701              		.cfi_endproc
 702              	.LFE953:
 704              		.section	.text.FLASH_WaitForLastOperation,"ax",%progbits
 705              		.align	1
 706              		.global	FLASH_WaitForLastOperation
 707              		.syntax unified
 708              		.thumb
 709              		.thumb_func
 710              		.fpu fpv4-sp-d16
 712              	FLASH_WaitForLastOperation:
 713              	.LVL35:
 714              	.LFB954:
 606:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint32_t error;
 715              		.loc 1 606 1 is_stmt 1 view -0
 716              		.cfi_startproc
 717              		@ args = 0, pretend = 0, frame = 0
 718              		@ frame_needed = 0, uses_anonymous_args = 0
 606:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint32_t error;
 719              		.loc 1 606 1 is_stmt 0 view .LVU176
 720 0000 38B5     		push	{r3, r4, r5, lr}
 721              	.LCFI5:
 722              		.cfi_def_cfa_offset 16
 723              		.cfi_offset 3, -16
 724              		.cfi_offset 4, -12
 725              		.cfi_offset 5, -8
 726              		.cfi_offset 14, -4
 727 0002 0546     		mov	r5, r0
 607:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   uint32_t tickstart = HAL_GetTick();
 728              		.loc 1 607 3 is_stmt 1 view .LVU177
 608:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 729              		.loc 1 608 3 view .LVU178
 608:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 730              		.loc 1 608 24 is_stmt 0 view .LVU179
 731 0004 FFF7FEFF 		bl	HAL_GetTick
 732              	.LVL36:
ARM GAS  /tmp/cctRLtgk.s 			page 45


 608:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 733              		.loc 1 608 24 view .LVU180
 734 0008 0446     		mov	r4, r0
 735              	.LVL37:
 613:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 736              		.loc 1 613 3 is_stmt 1 view .LVU181
 737              	.L60:
 613:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 738              		.loc 1 613 10 is_stmt 0 view .LVU182
 739 000a 164B     		ldr	r3, .L73
 740 000c 1B69     		ldr	r3, [r3, #16]
 613:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 741              		.loc 1 613 9 view .LVU183
 742 000e 13F4803F 		tst	r3, #65536
 743 0012 06D0     		beq	.L70
 615:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 744              		.loc 1 615 5 is_stmt 1 view .LVU184
 615:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 745              		.loc 1 615 10 is_stmt 0 view .LVU185
 746 0014 FFF7FEFF 		bl	HAL_GetTick
 747              	.LVL38:
 615:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 748              		.loc 1 615 24 view .LVU186
 749 0018 001B     		subs	r0, r0, r4
 615:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 750              		.loc 1 615 8 view .LVU187
 751 001a A842     		cmp	r0, r5
 752 001c F5D3     		bcc	.L60
 617:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 753              		.loc 1 617 14 view .LVU188
 754 001e 0320     		movs	r0, #3
 755              	.L61:
 655:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 756              		.loc 1 655 1 view .LVU189
 757 0020 38BD     		pop	{r3, r4, r5, pc}
 758              	.LVL39:
 759              	.L70:
 622:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 760              		.loc 1 622 3 is_stmt 1 view .LVU190
 622:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 761              		.loc 1 622 9 is_stmt 0 view .LVU191
 762 0022 104B     		ldr	r3, .L73
 763 0024 1B69     		ldr	r3, [r3, #16]
 764              	.LVL40:
 625:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 765              		.loc 1 625 3 is_stmt 1 view .LVU192
 625:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 766              		.loc 1 625 6 is_stmt 0 view .LVU193
 767 0026 13F0010F 		tst	r3, #1
 768 002a 02D0     		beq	.L63
 628:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 769              		.loc 1 628 5 is_stmt 1 discriminator 4 view .LVU194
 628:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 770              		.loc 1 628 5 discriminator 4 view .LVU195
 628:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 771              		.loc 1 628 5 discriminator 4 view .LVU196
 628:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
ARM GAS  /tmp/cctRLtgk.s 			page 46


 772              		.loc 1 628 5 discriminator 4 view .LVU197
 773 002c 0D4A     		ldr	r2, .L73
 774 002e 0121     		movs	r1, #1
 775 0030 1161     		str	r1, [r2, #16]
 776              	.L63:
 632:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 777              		.loc 1 632 3 view .LVU198
 632:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 778              		.loc 1 632 9 is_stmt 0 view .LVU199
 779 0032 4CF2FA32 		movw	r2, #50170
 780              	.LVL41:
 635:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 781              		.loc 1 635 3 is_stmt 1 view .LVU200
 635:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 782              		.loc 1 635 3 view .LVU201
 635:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 783              		.loc 1 635 3 view .LVU202
 784 0036 1340     		ands	r3, r3, r2
 785              	.LVL42:
 635:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 786              		.loc 1 635 3 is_stmt 0 view .LVU203
 787 0038 01D0     		beq	.L64
 635:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 788              		.loc 1 635 3 is_stmt 1 discriminator 4 view .LVU204
 789 003a 0A4A     		ldr	r2, .L73
 790 003c 1361     		str	r3, [r2, #16]
 791              	.L64:
 637:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 792              		.loc 1 637 3 view .LVU205
 637:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 793              		.loc 1 637 6 is_stmt 0 view .LVU206
 794 003e 5BB9     		cbnz	r3, .L71
 795              	.LVL43:
 796              	.L65:
 646:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 797              		.loc 1 646 10 view .LVU207
 798 0040 084B     		ldr	r3, .L73
 799 0042 1B69     		ldr	r3, [r3, #16]
 646:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 800              		.loc 1 646 9 view .LVU208
 801 0044 13F4802F 		tst	r3, #262144
 802 0048 0AD0     		beq	.L72
 648:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 803              		.loc 1 648 5 is_stmt 1 view .LVU209
 648:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 804              		.loc 1 648 10 is_stmt 0 view .LVU210
 805 004a FFF7FEFF 		bl	HAL_GetTick
 806              	.LVL44:
 648:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 807              		.loc 1 648 24 view .LVU211
 808 004e 001B     		subs	r0, r0, r4
 648:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 809              		.loc 1 648 8 view .LVU212
 810 0050 A842     		cmp	r0, r5
 811 0052 F5D3     		bcc	.L65
 650:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 812              		.loc 1 650 14 view .LVU213
ARM GAS  /tmp/cctRLtgk.s 			page 47


 813 0054 0320     		movs	r0, #3
 814 0056 E3E7     		b	.L61
 815              	.LVL45:
 816              	.L71:
 640:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 817              		.loc 1 640 5 is_stmt 1 view .LVU214
 640:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 818              		.loc 1 640 22 is_stmt 0 view .LVU215
 819 0058 034A     		ldr	r2, .L73+4
 820 005a 5360     		str	r3, [r2, #4]
 642:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 821              		.loc 1 642 5 is_stmt 1 view .LVU216
 642:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 822              		.loc 1 642 12 is_stmt 0 view .LVU217
 823 005c 0120     		movs	r0, #1
 824 005e DFE7     		b	.L61
 825              	.LVL46:
 826              	.L72:
 654:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 827              		.loc 1 654 10 view .LVU218
 828 0060 0020     		movs	r0, #0
 829 0062 DDE7     		b	.L61
 830              	.L74:
 831              		.align	2
 832              	.L73:
 833 0064 00400058 		.word	1476411392
 834 0068 00000000 		.word	.LANCHOR0
 835              		.cfi_endproc
 836              	.LFE954:
 838              		.section	.text.HAL_FLASH_Program,"ax",%progbits
 839              		.align	1
 840              		.global	HAL_FLASH_Program
 841              		.syntax unified
 842              		.thumb
 843              		.thumb_func
 844              		.fpu fpv4-sp-d16
 846              	HAL_FLASH_Program:
 847              	.LVL47:
 848              	.LFB943:
 179:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status;
 849              		.loc 1 179 1 is_stmt 1 view -0
 850              		.cfi_startproc
 851              		@ args = 0, pretend = 0, frame = 0
 852              		@ frame_needed = 0, uses_anonymous_args = 0
 179:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status;
 853              		.loc 1 179 1 is_stmt 0 view .LVU220
 854 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 855              	.LCFI6:
 856              		.cfi_def_cfa_offset 24
 857              		.cfi_offset 4, -24
 858              		.cfi_offset 5, -20
 859              		.cfi_offset 6, -16
 860              		.cfi_offset 7, -12
 861              		.cfi_offset 8, -8
 862              		.cfi_offset 14, -4
 180:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 863              		.loc 1 180 3 is_stmt 1 view .LVU221
ARM GAS  /tmp/cctRLtgk.s 			page 48


 183:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   assert_param(IS_ADDR_ALIGNED_64BITS(Address));
 864              		.loc 1 183 3 view .LVU222
 184:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 865              		.loc 1 184 3 view .LVU223
 185:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 866              		.loc 1 185 3 view .LVU224
 188:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 867              		.loc 1 188 3 view .LVU225
 188:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 868              		.loc 1 188 3 view .LVU226
 869 0004 184C     		ldr	r4, .L83
 870 0006 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 871 0008 012C     		cmp	r4, #1
 872 000a 2AD0     		beq	.L80
 873 000c 1F46     		mov	r7, r3
 874 000e 9046     		mov	r8, r2
 875 0010 0E46     		mov	r6, r1
 876 0012 0546     		mov	r5, r0
 188:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 877              		.loc 1 188 3 discriminator 2 view .LVU227
 878 0014 144C     		ldr	r4, .L83
 879 0016 0123     		movs	r3, #1
 880 0018 2370     		strb	r3, [r4]
 191:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 881              		.loc 1 191 3 discriminator 2 view .LVU228
 191:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 882              		.loc 1 191 20 is_stmt 0 discriminator 2 view .LVU229
 883 001a 0023     		movs	r3, #0
 884 001c 6360     		str	r3, [r4, #4]
 194:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 885              		.loc 1 194 3 is_stmt 1 discriminator 2 view .LVU230
 194:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 886              		.loc 1 194 12 is_stmt 0 discriminator 2 view .LVU231
 887 001e 4FF47A70 		mov	r0, #1000
 888              	.LVL48:
 194:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 889              		.loc 1 194 12 discriminator 2 view .LVU232
 890 0022 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 891              	.LVL49:
 196:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 892              		.loc 1 196 3 is_stmt 1 discriminator 2 view .LVU233
 196:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 893              		.loc 1 196 6 is_stmt 0 discriminator 2 view .LVU234
 894 0026 0446     		mov	r4, r0
 895 0028 78B9     		cbnz	r0, .L77
 198:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 896              		.loc 1 198 5 is_stmt 1 view .LVU235
 198:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 897              		.loc 1 198 8 is_stmt 0 view .LVU236
 898 002a 012D     		cmp	r5, #1
 899 002c 13D0     		beq	.L82
 209:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 900              		.loc 1 209 7 is_stmt 1 view .LVU237
 212:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 901              		.loc 1 212 7 view .LVU238
 902 002e 4146     		mov	r1, r8
 903 0030 3046     		mov	r0, r6
ARM GAS  /tmp/cctRLtgk.s 			page 49


 904              	.LVL50:
 212:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 905              		.loc 1 212 7 is_stmt 0 view .LVU239
 906 0032 FFF7FEFF 		bl	FLASH_Program_Fast
 907              	.LVL51:
 908              	.L79:
 216:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 909              		.loc 1 216 5 is_stmt 1 view .LVU240
 216:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 910              		.loc 1 216 14 is_stmt 0 view .LVU241
 911 0036 4FF47A70 		mov	r0, #1000
 912 003a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 913              	.LVL52:
 914 003e 0446     		mov	r4, r0
 915              	.LVL53:
 219:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 916              		.loc 1 219 5 is_stmt 1 view .LVU242
 917 0040 0A4B     		ldr	r3, .L83+4
 918 0042 5869     		ldr	r0, [r3, #20]
 919 0044 20EA0500 		bic	r0, r0, r5
 920 0048 5861     		str	r0, [r3, #20]
 921              	.LVL54:
 922              	.L77:
 223:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 923              		.loc 1 223 3 view .LVU243
 223:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 924              		.loc 1 223 3 view .LVU244
 925 004a 074B     		ldr	r3, .L83
 926 004c 0022     		movs	r2, #0
 927 004e 1A70     		strb	r2, [r3]
 226:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** }
 928              		.loc 1 226 3 view .LVU245
 929              	.LVL55:
 930              	.L76:
 227:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 931              		.loc 1 227 1 is_stmt 0 view .LVU246
 932 0050 2046     		mov	r0, r4
 933 0052 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 934              	.LVL56:
 935              	.L82:
 201:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 936              		.loc 1 201 7 is_stmt 1 view .LVU247
 204:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 937              		.loc 1 204 7 view .LVU248
 938 0056 4246     		mov	r2, r8
 939 0058 3B46     		mov	r3, r7
 940 005a 3046     		mov	r0, r6
 941              	.LVL57:
 204:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 942              		.loc 1 204 7 is_stmt 0 view .LVU249
 943 005c FFF7FEFF 		bl	FLASH_Program_DoubleWord
 944              	.LVL58:
 945 0060 E9E7     		b	.L79
 946              	.LVL59:
 947              	.L80:
 188:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 948              		.loc 1 188 3 view .LVU250
ARM GAS  /tmp/cctRLtgk.s 			page 50


 949 0062 0224     		movs	r4, #2
 950 0064 F4E7     		b	.L76
 951              	.L84:
 952 0066 00BF     		.align	2
 953              	.L83:
 954 0068 00000000 		.word	.LANCHOR0
 955 006c 00400058 		.word	1476411392
 956              		.cfi_endproc
 957              	.LFE943:
 959              		.section	.text.HAL_FLASH_Program_IT,"ax",%progbits
 960              		.align	1
 961              		.global	HAL_FLASH_Program_IT
 962              		.syntax unified
 963              		.thumb
 964              		.thumb_func
 965              		.fpu fpv4-sp-d16
 967              	HAL_FLASH_Program_IT:
 968              	.LVL60:
 969              	.LFB944:
 243:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status;
 970              		.loc 1 243 1 is_stmt 1 view -0
 971              		.cfi_startproc
 972              		@ args = 0, pretend = 0, frame = 0
 973              		@ frame_needed = 0, uses_anonymous_args = 0
 243:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   HAL_StatusTypeDef status;
 974              		.loc 1 243 1 is_stmt 0 view .LVU252
 975 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 976              	.LCFI7:
 977              		.cfi_def_cfa_offset 24
 978              		.cfi_offset 4, -24
 979              		.cfi_offset 5, -20
 980              		.cfi_offset 6, -16
 981              		.cfi_offset 7, -12
 982              		.cfi_offset 8, -8
 983              		.cfi_offset 14, -4
 244:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 984              		.loc 1 244 3 is_stmt 1 view .LVU253
 247:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   assert_param(IS_ADDR_ALIGNED_64BITS(Address));
 985              		.loc 1 247 3 view .LVU254
 248:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 986              		.loc 1 248 3 view .LVU255
 249:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 987              		.loc 1 249 3 view .LVU256
 252:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 988              		.loc 1 252 3 view .LVU257
 252:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 989              		.loc 1 252 3 view .LVU258
 990 0004 174C     		ldr	r4, .L92
 991 0006 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 992 0008 012C     		cmp	r4, #1
 993 000a 29D0     		beq	.L89
 994 000c 1F46     		mov	r7, r3
 995 000e 9046     		mov	r8, r2
 996 0010 0E46     		mov	r6, r1
 997 0012 0546     		mov	r5, r0
 252:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 998              		.loc 1 252 3 discriminator 2 view .LVU259
ARM GAS  /tmp/cctRLtgk.s 			page 51


 999 0014 134C     		ldr	r4, .L92
 1000 0016 0123     		movs	r3, #1
 1001 0018 2370     		strb	r3, [r4]
 255:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1002              		.loc 1 255 3 discriminator 2 view .LVU260
 255:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1003              		.loc 1 255 20 is_stmt 0 discriminator 2 view .LVU261
 1004 001a 0023     		movs	r3, #0
 1005 001c 6360     		str	r3, [r4, #4]
 258:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1006              		.loc 1 258 3 is_stmt 1 discriminator 2 view .LVU262
 258:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1007              		.loc 1 258 12 is_stmt 0 discriminator 2 view .LVU263
 1008 001e 4FF47A70 		mov	r0, #1000
 1009              	.LVL61:
 258:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1010              		.loc 1 258 12 discriminator 2 view .LVU264
 1011 0022 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1012              	.LVL62:
 260:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 1013              		.loc 1 260 3 is_stmt 1 discriminator 2 view .LVU265
 260:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   {
 1014              		.loc 1 260 6 is_stmt 0 discriminator 2 view .LVU266
 1015 0026 0446     		mov	r4, r0
 1016 0028 28B1     		cbz	r0, .L87
 263:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 1017              		.loc 1 263 5 is_stmt 1 view .LVU267
 263:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****   }
 1018              		.loc 1 263 5 view .LVU268
 1019 002a 0E4B     		ldr	r3, .L92
 1020 002c 0022     		movs	r2, #0
 1021 002e 1A70     		strb	r2, [r3]
 1022              	.LVL63:
 1023              	.L86:
 294:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1024              		.loc 1 294 1 is_stmt 0 view .LVU269
 1025 0030 2046     		mov	r0, r4
 1026 0032 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1027              	.LVL64:
 1028              	.L87:
 268:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     pFlash.Address = Address;
 1029              		.loc 1 268 5 is_stmt 1 view .LVU270
 268:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     pFlash.Address = Address;
 1030              		.loc 1 268 29 is_stmt 0 view .LVU271
 1031 0036 0B4B     		ldr	r3, .L92
 1032 0038 9D60     		str	r5, [r3, #8]
 269:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1033              		.loc 1 269 5 is_stmt 1 view .LVU272
 269:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1034              		.loc 1 269 20 is_stmt 0 view .LVU273
 1035 003a DE60     		str	r6, [r3, #12]
 272:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1036              		.loc 1 272 5 is_stmt 1 view .LVU274
 272:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1037              		.loc 1 272 5 view .LVU275
 272:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1038              		.loc 1 272 5 view .LVU276
ARM GAS  /tmp/cctRLtgk.s 			page 52


 272:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1039              		.loc 1 272 5 view .LVU277
 1040 003c 0A4A     		ldr	r2, .L92+4
 1041 003e 5369     		ldr	r3, [r2, #20]
 1042 0040 43F04073 		orr	r3, r3, #50331648
 1043 0044 5361     		str	r3, [r2, #20]
 274:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 1044              		.loc 1 274 5 view .LVU278
 274:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     {
 1045              		.loc 1 274 8 is_stmt 0 view .LVU279
 1046 0046 012D     		cmp	r5, #1
 1047 0048 04D0     		beq	.L91
 285:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1048              		.loc 1 285 7 is_stmt 1 view .LVU280
 288:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 1049              		.loc 1 288 7 view .LVU281
 1050 004a 4146     		mov	r1, r8
 1051 004c 3046     		mov	r0, r6
 1052              	.LVL65:
 288:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 1053              		.loc 1 288 7 is_stmt 0 view .LVU282
 1054 004e FFF7FEFF 		bl	FLASH_Program_Fast
 1055              	.LVL66:
 1056 0052 EDE7     		b	.L86
 1057              	.LVL67:
 1058              	.L91:
 277:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1059              		.loc 1 277 7 is_stmt 1 view .LVU283
 280:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 1060              		.loc 1 280 7 view .LVU284
 1061 0054 4246     		mov	r2, r8
 1062 0056 3B46     		mov	r3, r7
 1063 0058 3046     		mov	r0, r6
 1064              	.LVL68:
 280:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c ****     }
 1065              		.loc 1 280 7 is_stmt 0 view .LVU285
 1066 005a FFF7FEFF 		bl	FLASH_Program_DoubleWord
 1067              	.LVL69:
 1068 005e E7E7     		b	.L86
 1069              	.LVL70:
 1070              	.L89:
 252:Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c **** 
 1071              		.loc 1 252 3 view .LVU286
 1072 0060 0224     		movs	r4, #2
 1073 0062 E5E7     		b	.L86
 1074              	.L93:
 1075              		.align	2
 1076              	.L92:
 1077 0064 00000000 		.word	.LANCHOR0
 1078 0068 00400058 		.word	1476411392
 1079              		.cfi_endproc
 1080              	.LFE944:
 1082              		.global	pFlash
 1083              		.section	.bss.pFlash,"aw",%nobits
 1084              		.align	2
 1085              		.set	.LANCHOR0,. + 0
 1088              	pFlash:
ARM GAS  /tmp/cctRLtgk.s 			page 53


 1089 0000 00000000 		.space	24
 1089      00000000 
 1089      00000000 
 1089      00000000 
 1089      00000000 
 1090              		.text
 1091              	.Letext0:
 1092              		.file 3 "/usr/lib/gcc/arm-none-eabi/8.3.1/include/stdint.h"
 1093              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 1094              		.file 5 "Drivers/CMSIS/Device/ST/STM32WBxx/Include/system_stm32wbxx.h"
 1095              		.file 6 "Drivers/CMSIS/Device/ST/STM32WBxx/Include/stm32wb55xx.h"
 1096              		.file 7 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_def.h"
 1097              		.file 8 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_flash.h"
 1098              		.file 9 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_uart.h"
 1099              		.file 10 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal.h"
 1100              		.file 11 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_flash_ex.h"
ARM GAS  /tmp/cctRLtgk.s 			page 54


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32wbxx_hal_flash.c
     /tmp/cctRLtgk.s:18     .text.FLASH_Program_DoubleWord:0000000000000000 $t
     /tmp/cctRLtgk.s:25     .text.FLASH_Program_DoubleWord:0000000000000000 FLASH_Program_DoubleWord
     /tmp/cctRLtgk.s:74     .text.FLASH_Program_DoubleWord:000000000000001c $d
     /tmp/cctRLtgk.s:79     .RamFunc:0000000000000000 $t
     /tmp/cctRLtgk.s:85     .RamFunc:0000000000000000 FLASH_Program_Fast
     /tmp/cctRLtgk.s:199    .RamFunc:0000000000000038 $d
     /tmp/cctRLtgk.s:204    .text.HAL_FLASH_EndOfOperationCallback:0000000000000000 $t
     /tmp/cctRLtgk.s:211    .text.HAL_FLASH_EndOfOperationCallback:0000000000000000 HAL_FLASH_EndOfOperationCallback
     /tmp/cctRLtgk.s:226    .text.HAL_FLASH_OperationErrorCallback:0000000000000000 $t
     /tmp/cctRLtgk.s:233    .text.HAL_FLASH_OperationErrorCallback:0000000000000000 HAL_FLASH_OperationErrorCallback
     /tmp/cctRLtgk.s:248    .text.HAL_FLASH_IRQHandler:0000000000000000 $t
     /tmp/cctRLtgk.s:255    .text.HAL_FLASH_IRQHandler:0000000000000000 HAL_FLASH_IRQHandler
     /tmp/cctRLtgk.s:432    .text.HAL_FLASH_IRQHandler:00000000000000b0 $d
     /tmp/cctRLtgk.s:439    .text.HAL_FLASH_Unlock:0000000000000000 $t
     /tmp/cctRLtgk.s:446    .text.HAL_FLASH_Unlock:0000000000000000 HAL_FLASH_Unlock
     /tmp/cctRLtgk.s:492    .text.HAL_FLASH_Unlock:0000000000000028 $d
     /tmp/cctRLtgk.s:498    .text.HAL_FLASH_Lock:0000000000000000 $t
     /tmp/cctRLtgk.s:505    .text.HAL_FLASH_Lock:0000000000000000 HAL_FLASH_Lock
     /tmp/cctRLtgk.s:539    .text.HAL_FLASH_Lock:0000000000000018 $d
     /tmp/cctRLtgk.s:544    .text.HAL_FLASH_OB_Unlock:0000000000000000 $t
     /tmp/cctRLtgk.s:551    .text.HAL_FLASH_OB_Unlock:0000000000000000 HAL_FLASH_OB_Unlock
     /tmp/cctRLtgk.s:596    .text.HAL_FLASH_OB_Unlock:000000000000002c $d
     /tmp/cctRLtgk.s:602    .text.HAL_FLASH_OB_Lock:0000000000000000 $t
     /tmp/cctRLtgk.s:609    .text.HAL_FLASH_OB_Lock:0000000000000000 HAL_FLASH_OB_Lock
     /tmp/cctRLtgk.s:642    .text.HAL_FLASH_OB_Lock:000000000000001c $d
     /tmp/cctRLtgk.s:647    .text.HAL_FLASH_OB_Launch:0000000000000000 $t
     /tmp/cctRLtgk.s:654    .text.HAL_FLASH_OB_Launch:0000000000000000 HAL_FLASH_OB_Launch
     /tmp/cctRLtgk.s:673    .text.HAL_FLASH_OB_Launch:0000000000000010 $d
     /tmp/cctRLtgk.s:678    .text.HAL_FLASH_GetError:0000000000000000 $t
     /tmp/cctRLtgk.s:685    .text.HAL_FLASH_GetError:0000000000000000 HAL_FLASH_GetError
     /tmp/cctRLtgk.s:700    .text.HAL_FLASH_GetError:0000000000000008 $d
     /tmp/cctRLtgk.s:705    .text.FLASH_WaitForLastOperation:0000000000000000 $t
     /tmp/cctRLtgk.s:712    .text.FLASH_WaitForLastOperation:0000000000000000 FLASH_WaitForLastOperation
     /tmp/cctRLtgk.s:833    .text.FLASH_WaitForLastOperation:0000000000000064 $d
     /tmp/cctRLtgk.s:839    .text.HAL_FLASH_Program:0000000000000000 $t
     /tmp/cctRLtgk.s:846    .text.HAL_FLASH_Program:0000000000000000 HAL_FLASH_Program
     /tmp/cctRLtgk.s:954    .text.HAL_FLASH_Program:0000000000000068 $d
     /tmp/cctRLtgk.s:960    .text.HAL_FLASH_Program_IT:0000000000000000 $t
     /tmp/cctRLtgk.s:967    .text.HAL_FLASH_Program_IT:0000000000000000 HAL_FLASH_Program_IT
     /tmp/cctRLtgk.s:1077   .text.HAL_FLASH_Program_IT:0000000000000064 $d
     /tmp/cctRLtgk.s:1088   .bss.pFlash:0000000000000000 pFlash
     /tmp/cctRLtgk.s:1084   .bss.pFlash:0000000000000000 $d

UNDEFINED SYMBOLS
FLASH_PageErase
HAL_GetTick

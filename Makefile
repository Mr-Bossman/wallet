##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.14.1] date: [Sun Aug 29 21:01:51 EDT 2021] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = wallet


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -O3


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources

C_SOURCES =  \
Core/Src/lcd_ui.c \
Core/Src/ssd1306.c \
Core/Src/Cstring_func.c \
Core/Src/run.c \
Core/Src/retarget.c \
Core/Src/main.c \
Core/Src/encrypt.c \
Core/Src/eeprom.c \
Core/Src/sha256.c \
Core/Src/aes.c \
Core/Src/app_freertos.c \
Core/Src/stm32wbxx_it.c \
Core/Src/stm32wbxx_hal_msp.c \
Core/Src/stm32wbxx_hal_timebase_tim.c \
Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_rcc.c \
Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_rcc_ex.c \
Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash.c \
Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_flash_ex.c \
Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_gpio.c \
Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_hsem.c \
Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_dma.c \
Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_dma_ex.c \
Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_pwr.c \
Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_pwr_ex.c \
Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_cortex.c \
Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal.c \
Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_exti.c \
Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_uart.c \
Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_uart_ex.c \
Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_tim.c \
Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_tim_ex.c \
Core/Src/system_stm32wbxx.c \
Middlewares/Third_Party/FreeRTOS/Source/croutine.c \
Middlewares/Third_Party/FreeRTOS/Source/event_groups.c \
Middlewares/Third_Party/FreeRTOS/Source/list.c \
Middlewares/Third_Party/FreeRTOS/Source/queue.c \
Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c \
Middlewares/Third_Party/FreeRTOS/Source/tasks.c \
Middlewares/Third_Party/FreeRTOS/Source/timers.c \
Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.c \
Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c \
Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c \
Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_i2c.c \
Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_i2c_ex.c \
Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_qspi.c \
Drivers/STM32WBxx_HAL_Driver/Src/stm32wbxx_hal_rng.c

# ASM sources
ASM_SOURCES =  \
startup_stm32wb55xx_cm4.s


#######################################
# binaries
#######################################
HOST = $(shell gcc -v 2> /dev/stdout | awk  -e '/Target:/ {print $$2}')
PREFIX = arm-none-eabi
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)-gcc
CXX = $(GCC_PATH)/$(PREFIX)-g++
AS = $(GCC_PATH)/$(PREFIX)-gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)-objcopy
SZ = $(GCC_PATH)/$(PREFIX)-size
else
CC = $(PREFIX)-gcc
CXX = $(PREFIX)-g++
AS = $(PREFIX)-gcc -x assembler-with-cpp
CP = $(PREFIX)-objcopy
SZ = $(PREFIX)-size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32WB55xx


# AS includes
AS_INCLUDES =  \
-ICore/Inc

# C includes
C_INCLUDES =  \
-ICore/Inc \
-ICore/Inc/font8x8 \
-IDrivers/STM32WBxx_HAL_Driver/Inc \
-IDrivers/STM32WBxx_HAL_Driver/Inc/Legacy \
-IMiddlewares/Third_Party/FreeRTOS/Source/include \
-IMiddlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 \
-IMiddlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F \
-IDrivers/CMSIS/Device/ST/STM32WBxx/Include \
-IDrivers/CMSIS/Include


# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -pedantic -fdata-sections -ffunction-sections  -Wno-unused-result -Wno-pointer-sign -Wno-unused-function

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -pedantic -fdata-sections -ffunction-sections -Wno-unused-result -Wno-pointer-sign -Wno-unused-function -std=c11

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP

#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = stm32wb55xx_flash_cm4.ld

# libraries
LIBS = -lc -lstdc++ -lm -lnosys -lrdimon -u _printf_float
LIBDIR = 
LDFLAGS = $(MCU) -specs=nosys.specs -specs=nano.specs $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections -Wl,--wrap=free -Wl,--wrap=realloc 

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
OBJECTS += secp256k1/src/libsecp256k1_la-secp256k1.o
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -MF"$(@:%.o=%.d)" -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) -MF"$(@:%.o=%.d)" $< -o $@

secp256k1/src/libsecp256k1_la-secp256k1.o:
	#$(shell cd secp256k1 && ./autogen.sh)
	#$(shell cd secp256k1 && ./configure CXX=$(CXX) CC=$(CC) --build=$(PREFIX) --target=$(PREFIX) CFLAGS='$(CFLAGS) -specs=nosys.specs -specs=nano.specs' CXXFLAGS='$(CFLAGS) -specs=nosys.specs -specs=nano.specs' --host=$(HOST)  --enable-module-recovery -enable-ecmult-static-precomputation)
	$(MAKE) -C ./secp256k1

#adding lib rust breaks it
$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CXX) $(OBJECTS)  libs/main.a  libs/libsnark.a  libs/librustzcash.a libs/libsodium.a $(LDFLAGS) -T$(LDSCRIPT) -o $@
	$(CP) -R .text2 $@ $@_main
	$(CP) -j .text2 $@ $@_text
	$(SZ) $@
	$(SZ) $@_text
	$(SZ) $@_main


$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) -R .text2 $< $@
	$(HEX) -j .text2 $< $@_text2
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) -R .text2 $< $@	
	$(BIN) -j .text2 $< $@_text2
	
$(BUILD_DIR):
	mkdir $@		
#-mlong-calls
#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
clean-all:
	$(MAKE) -C ./secp256k1 clean
	-rm -fR $(BUILD_DIR)
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
